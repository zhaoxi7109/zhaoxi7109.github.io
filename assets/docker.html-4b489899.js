import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as r,c as l,a,e,b as s,d}from"./app-9f31e196.js";const o={},c=a("h1",{id:"docker",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#docker","aria-hidden":"true"},"#"),e(" docker")],-1),p=a("h2",{id:"_6-docker",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_6-docker","aria-hidden":"true"},"#"),e(" 6. Docker")],-1),u={href:"https://www.docker.com/",target:"_blank",rel:"noopener noreferrer"},v=d('<h3 id="_6-1-docker简介" tabindex="-1"><a class="header-anchor" href="#_6-1-docker简介" aria-hidden="true">#</a> 6.1 Docker简介</h3><p><strong>Docker</strong>是一种开源的容器化平台，可以帮助开发人员打包、发布和运行应用程序。</p><p>Docker的核心组件包括<strong>Docker Engine、Docker Hub和Docker CLI</strong>。其中，Docker Engine是Docker的核心引擎，用于构建、运行和管理Docker容器；Docker Hub是Docker的<strong>公共镜像库</strong>，可以存储和分享Docker<strong>容器</strong>镜像；Docker CLI是Docker的命令行界面，可以帮助开发人员管理Docker容器。</p><h4 id="_6-1-1-docker的跨系统性" tabindex="-1"><a class="header-anchor" href="#_6-1-1-docker的跨系统性" aria-hidden="true">#</a> 6.1.1 Docker的跨系统性</h4><p>Docker 能够在不同的操作系统之间适配的原因是因为它利用了操作系统提供的虚拟化技术。具体来说，Docker 使用了 Linux 内核提供的 <strong>cgroups</strong> 和 <strong>namespace</strong> 等功能来实现容器化，这些功能可以隔离应用程序和宿主操作系统之间的资源和环境。</p><p>在 Windows 和 macOS 上， Docker 利用了它们自己的虚拟化技术，分别是 <strong>Hyper-V</strong> 和 <strong>xhyve</strong>。这些技术可以在 Windows 和 macOS 上创建虚拟机，然后在虚拟机中运行 Linux 系统和 Docker 引擎，从而实现 Docker 在不同操作系统之间的适配。<br> 也就是说Windows和Mac上使用Docker要么用系统自带的<strong>WSL</strong>虚拟话Linux系统，要么下载虚拟机（VMware）来构建Linux环境。总之都是基于Linux系统。</p><h4 id="_6-1-2-wsl技术" tabindex="-1"><a class="header-anchor" href="#_6-1-2-wsl技术" aria-hidden="true">#</a> 6.1.2 WSL技术</h4><p><strong>WSL (Windows Subsystem for Linux)</strong> 是一种由 Microsoft 开发的技术，它允许在 Windows 操作系统上运行 Linux 应用程序和命令行工具。WSL 提供了一个运行 Linux 内核的轻量级虚拟化环境，与 Windows 操作系统相互隔离，但可以与 Windows 文件系统进行交互。通过 WSL，用户可以在 Windows 上使用 Linux 应用程序和工具，从而无需在 Windows 和 Linux 之间切换操作系统。</p><p>WSL 有两个版本：WSL 1 和 WSL 2。WSL 1 使用的是一个轻量级的虚拟机，它可以在 Windows 和 Linux 之间共享文件系统和网络资源，但性能可能不如 WSL 2。WSL 2 使用的是完整的 Linux 内核，它可以提供更好的性能和兼容性，并且支持在 Linux 上运行 Docker 等容器技术。</p><p>WSL 可以通过在 Windows 上安装适当的 Linux 发行版来启用。目前，Microsoft 支持在 WSL 上安装 Ubuntu、Debian、Kali Linux、OpenSUSE 和 SLES 等常见的 Linux 发行版。</p><p>也就是在不使用VMware直接在Windows系统中布置Linux发行版子系统</p><h4 id="_6-1-3-linux系统上功能的实现过程" tabindex="-1"><a class="header-anchor" href="#_6-1-3-linux系统上功能的实现过程" aria-hidden="true">#</a> 6.1.3 Linux系统上功能的实现过程</h4><p>应用程序调用库函数 -&gt; 库函数调用调用内核指令 - &gt;内核指令操作计算机硬件</p><h4 id="_6-1-4-打包内容" tabindex="-1"><a class="header-anchor" href="#_6-1-4-打包内容" aria-hidden="true">#</a> 6.1.4 打包内容</h4><ol><li>应用程序代码：这包括应用程序的源代码、可执行文件、配置文件等。</li><li>运行时环境：包括操作系统、语言运行时、库文件、依赖包等。这样，应用程序可以在容器中运行，而不受宿主操作系统和环境的影响。</li><li>应用程序依赖：例如数据库、消息队列、缓存等。这些依赖项可以与应用程序一起部署，并在容器内部运行，避免了在宿主操作系统上安装和配置这些依赖项的麻烦。</li><li>配置文件：Docker 会将应用程序的配置文件打包到容器中，以便在容器启动时加载和使用。这些配置文件包括应用程序的参数设置、环境变量、日志输出等。</li><li>其他资源：Docker 还可以打包其他应用程序所需的资源，例如静态文件、图片、视频等。这些资源可以与应用程序一起部署，并在容器内部使用。</li></ol><h4 id="_6-1-5-docker打包是否增加了项目体积" tabindex="-1"><a class="header-anchor" href="#_6-1-5-docker打包是否增加了项目体积" aria-hidden="true">#</a> 6.1.5 Docker打包是否增加了项目体积</h4><p>对于一般部署，确实增加了体积，但可以接受。</p><p>首先，Docker 可以将应用程序和依赖项打包到一个容器中，并在容器中运行。这样可以避免在宿主操作系统上安装和配置各种依赖项，减少了部署和管理的复杂性和难度。虽然容器的体积相对较大，但是它可以减少应用程序的部署和运行的时间，提高了效率和可靠性。</p><p>其次，Docker 提供了一致的开发环境和部署方案，使得应用程序在不同的环境中保持一致的行为和性能。这种可移植性和可重复性可以减少部署和管理的风险，同时也方便了应用程序的迁移和扩展。</p><p>最后，Docker 还可以使用镜像缓存和增量构建等技术来优化容器的体积和构建时间。镜像缓存可以避免重复下载和构建镜像，从而加快部署和构建的速度。增量构建可以利用先前构建的镜像进行增量更新，从而减少构建时间和镜像体积。</p><h4 id="_6-1-6-沙箱机制" tabindex="-1"><a class="header-anchor" href="#_6-1-6-沙箱机制" aria-hidden="true">#</a> 6.1.6 沙箱机制</h4><p>**沙箱（Sandbox）**是一种安全机制，它可以将应用程序限制在一个封闭的环境中，从而防止应用程序访问系统资源或执行危险操作。</p><p>在计算机领域中，沙箱可以用于多种用途，例如：</p><ol><li>应用程序隔离</li><li>恶意代码分析</li><li>软件开发和测试</li><li>虚拟化</li></ol><h4 id="_6-1-7-docker与虚拟机的区别" tabindex="-1"><a class="header-anchor" href="#_6-1-7-docker与虚拟机的区别" aria-hidden="true">#</a> 6.1.7 Docker与虚拟机的区别</h4><ol><li><p>实现方式：Docker 利用 Linux 内核的命名空间和控制组技术，将应用程序和依赖项打包到一个容器中，并在容器中运行。而虚拟机通过虚拟化技术，在物理服务器上创建多个虚拟机，每个虚拟机都运行一个完整的操作系统和应用程序。<br> Docker指涉及到项目用到的，虚拟机无论用与不用都将构建出完整操作系统。显得是分完备但又臃肿。</p></li><li><p>资源占用：Docker 容器和虚拟机相比，更加轻量级，占用的资源更少。Docker 容器共享宿主操作系统的内核和其他资源，而虚拟机需要为每个虚拟机分配独立的操作系统和资源。</p></li><li><p>启动时间：Docker 容器的启动时间比虚拟机更快，因为 Docker 只需要启动应用程序和依赖项，而不需要启动操作系统和其他环境。而虚拟机需要启动整个操作系统和虚拟化层，因此启动时间较长。</p></li><li><p>管理和部署：Docker 容器的管理和部署更加方便和灵活。Docker 可以通过镜像来进行容器的构建和管理，镜像可以在不同的环境中共享和重复使用。而虚拟机需要进行独立的操作系统安装和配置，管理和部署较为复杂。</p></li><li><p>安全性：虚拟机的安全性较高，因为每个虚拟机都运行独立的操作系统，相互之间隔离较好。而 Docker 容器共享宿主操作系统的内核和其他资源，容器之间隔离相对较弱，存在一定的安全风险。但是，Docker 通过沙箱和其他安全措施来加强容器的安全性，减少安全风险。</p></li></ol><h4 id="_6-1-8-docker中的网络" tabindex="-1"><a class="header-anchor" href="#_6-1-8-docker中的网络" aria-hidden="true">#</a> 6.1.8 Docker中的网络</h4><p>Docker中的网络是一种虚拟网络，用于在多个Docker容器之间提供通信和连接的机制。在Docker中，可以创建多个网络，每个网络可以包含多个容器。容器可以通过网络进行通信，就好像它们位于同一主机上一样。</p><p>Docker提供了几种不同类型的网络，包括：</p><ol><li><p><strong>桥接网络（Bridge network）</strong>：这是Docker中默认的网络类型。它允许容器通过主机的网桥进行通信，并为每个容器分配唯一的IP地址。</p></li><li><p><strong>主机网络（Host network）</strong>：这种类型的网络允许容器与主机共享网络命名空间，这意味着它们使用主机的网络栈。这可以提供更好的性能，但容器之间的隔离性会降低。</p></li><li><p><strong>覆盖网络（Overlay network）</strong>：这种类型的网络允许在多个Docker主机之间创建虚拟网络，从而实现跨主机容器之间的通信。</p></li><li><p><strong>None网络</strong>：这种类型的网络表示容器没有网络接口，因此它们与其他容器和主机之间没有网络连通性。</p></li></ol><h3 id="_6-2-docker安装" tabindex="-1"><a class="header-anchor" href="#_6-2-docker安装" aria-hidden="true">#</a> 6.2 Docker安装</h3><p>Docker 分为 CE 和 EE 两大版本。CE 即社区版（免费，支持周期 7 个月），EE 即企业版，强调安全，付费使用，支持周期 24 个月。Docker CE 分为 <code>stable</code> <code>test</code> 和 <code>nightly</code> 三个更新频道。</p>',32),m={href:"https://docs.docker.com/install/",target:"_blank",rel:"noopener noreferrer"},k=d(`<h4 id="_6-2-1-在centos安装docker" tabindex="-1"><a class="header-anchor" href="#_6-2-1-在centos安装docker" aria-hidden="true">#</a> 6.2.1 在CentOS安装Docker</h4><p>Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10， CentOS 7 满足最低内核的要求，所以我们在CentOS 7安装Docker。（所以要求我们先在虚拟机中安装配置好CentOS7）</p><ol><li>卸载掉之前旧版本的Docker，可以使用下面命令卸载（没安装过就不用）</li></ol><div class="language-yum line-numbers-mode" data-ext="yum"><pre class="language-yum"><code>yum remove docker \\
                  docker-client \\
                  docker-client-latest \\
                  docker-common \\
                  docker-latest \\
                  docker-latest-logrotate \\
                  docker-logrotate \\
                  docker-selinux \\
                  docker-engine-selinux \\
                  docker-engine \\
                  docker-ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>虚拟机联网，安装yum工具</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils <span class="token punctuation">\\</span>
           device-mapper-persistent-data <span class="token punctuation">\\</span>
           lvm2 --skip-broken
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>然后更新本地镜像源：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 设置docker镜像源</span>
yum-config-manager <span class="token punctuation">\\</span>
    --add-repo <span class="token punctuation">\\</span>
    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
    
<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/download.docker.com/mirrors.aliyun.com\\/docker-ce/g&#39;</span> /etc/yum.repos.d/docker-ce.repo

yum makecache fast
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>安装Docker CE版</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> docker-ce
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>启动docker</li></ol><p>Docker应用需要用到各种端口，逐一去修改防火墙设置。非常麻烦，因此建议<strong>直接关闭防火墙</strong>！</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 关闭</span>
systemctl stop firewalld
<span class="token comment"># 禁止开机启动防火墙</span>
systemctl disable firewalld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过命令启动docker：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start <span class="token function">docker</span>  <span class="token comment"># 启动docker服务</span>

systemctl stop <span class="token function">docker</span>  <span class="token comment"># 停止docker服务</span>

systemctl restart <span class="token function">docker</span>  <span class="token comment"># 重启docker服务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后输入命令，可以查看docker版本：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker -v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>设置docker开机自启动</p><ol><li>打开终端并使用以下命令编辑 Docker 服务文件：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo vi /lib/systemd/system/docker.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>在 [Service] 部分添加以下两行：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ExecStartPost=/usr/sbin/iptables -P FORWARD ACCEPT Restart=always
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这将确保 Docker 在启动时自动接受转发流量，并在失败时自动重启</p><ol start="3"><li>保存并关闭文件。:wq</li><li>使用以下命令重新加载 systemd 系统：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo systemctl daemon-reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>使用以下命令启用 Docker 开机自启动：</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo systemctl enable docker.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6-2-2-配置镜像加速" tabindex="-1"><a class="header-anchor" href="#_6-2-2-配置镜像加速" aria-hidden="true">#</a> 6.2.2 配置镜像加速</h4><p>docker官方镜像仓库网速较差，我们需要设置国内镜像服务：</p>`,29),b={href:"https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors",target:"_blank",rel:"noopener noreferrer"},g=d(`<h4 id="_6-2-3-centos7安装dockercompose" tabindex="-1"><a class="header-anchor" href="#_6-2-3-centos7安装dockercompose" aria-hidden="true">#</a> 6.2.3 CentOS7安装DockerCompose</h4><ol><li>Linux下需要通过命令下载：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装</span>
<span class="token function">curl</span> <span class="token parameter variable">-L</span> https://github.com/docker/compose/releases/download/1.23.1/docker-compose-<span class="token variable"><span class="token variable">\`</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">\`</span></span>-<span class="token variable"><span class="token variable">\`</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">\`</span></span> <span class="token operator">&gt;</span> /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在虚拟机下载速度较慢，或者下载失败，可以先下载到Windows本地再上传到<code>/usr/local/bin/</code>目录。</p><ol start="2"><li>修改文件权限</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 修改权限</span>
<span class="token function">chmod</span> +x /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Base自动补全命令：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 补全命令</span>
<span class="token function">curl</span> <span class="token parameter variable">-L</span> https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose <span class="token operator">&gt;</span> /etc/bash_completion.d/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果这里出现错误，需要修改自己的hosts文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;199.232.68.133 raw.githubusercontent.com&quot;</span> <span class="token operator">&gt;&gt;</span> /etc/hosts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6-2-4-docker镜像仓库" tabindex="-1"><a class="header-anchor" href="#_6-2-4-docker镜像仓库" aria-hidden="true">#</a> 6.2.4 Docker镜像仓库</h4>`,11),h={href:"https://hub.docker.com/_/registry",target:"_blank",rel:"noopener noreferrer"},x=d(`<h5 id="_6-2-4-1-简化版镜像仓库" tabindex="-1"><a class="header-anchor" href="#_6-2-4-1-简化版镜像仓库" aria-hidden="true">#</a> 6.2.4.1 简化版镜像仓库</h5><p>Docker官方的Docker Registry是一个基础版本的Docker镜像仓库，具备仓库管理的完整功能，但是没有图形化界面。命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\\</span>
    <span class="token parameter variable">--name</span> registry	<span class="token punctuation">\\</span>
    <span class="token parameter variable">-p</span> <span class="token number">5000</span>:5000 <span class="token punctuation">\\</span>
    <span class="token parameter variable">-v</span> registry-data:/var/lib/registry <span class="token punctuation">\\</span>
    registry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令中挂载了一个数据卷registry-data到容器内的/var/lib/registry 目录，这是私有镜像库存放数据的目录。</p>`,4),_={href:"http://YourIp:5000/v2/_catalog",target:"_blank",rel:"noopener noreferrer"},D=d(`<h5 id="_6-2-4-2-带图形化界面" tabindex="-1"><a class="header-anchor" href="#_6-2-4-2-带图形化界面" aria-hidden="true">#</a> 6.2.4.2 带图形化界面</h5><p>使用DockerCompose部署带有图象界面的DockerRegistry，命令如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.0&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">registry</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> registry
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./registry<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/var/lib/registry
  <span class="token key atrule">ui</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> joxit/docker<span class="token punctuation">-</span>registry<span class="token punctuation">-</span>ui<span class="token punctuation">:</span>static
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">80</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> REGISTRY_TITLE=昭晞私有仓库
      <span class="token punctuation">-</span> REGISTRY_URL=http<span class="token punctuation">:</span>//registry<span class="token punctuation">:</span><span class="token number">5000</span>
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> registry
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-2-4-3-配置docker信任地址" tabindex="-1"><a class="header-anchor" href="#_6-2-4-3-配置docker信任地址" aria-hidden="true">#</a> 6.2.4.3 配置Docker信任地址</h5><p>私服采用的是http协议，默认不被Docker信任，所以需要做一个配置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 打开要修改的文件</span>
<span class="token function">vi</span> /etc/docker/daemon.json
<span class="token comment"># 添加地址：</span>
<span class="token string">&quot;insecure-registries&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;http://192.168.150.101:8080&quot;</span><span class="token punctuation">]</span>
<span class="token comment"># 重加载</span>
systemctl daemon-reload
<span class="token comment"># 重启docker</span>
systemctl restart <span class="token function">docker</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-常见命令" tabindex="-1"><a class="header-anchor" href="#_6-3-常见命令" aria-hidden="true">#</a> 6.3 常见命令</h3><h4 id="_6-3-1-常见镜像命令" tabindex="-1"><a class="header-anchor" href="#_6-3-1-常见镜像命令" aria-hidden="true">#</a> 6.3.1 常见镜像命令</h4><p>以下是一些常见的 Docker 镜像命令：</p><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>docker images</td><td>列出本地主机上的所有 Docker 镜像</td></tr><tr><td>docker search &lt;镜像名称&gt;</td><td>在 Docker Hub 上搜索指定名称的镜像</td></tr><tr><td>docker pull &lt;镜像名称&gt;</td><td>下载指定名称的 Docker 镜像到本地主机</td></tr><tr><td>docker rmi &lt;镜像名称&gt;</td><td>删除本地主机上指定名称的 Docker 镜像</td></tr><tr><td>docker tag &lt;源镜像名称&gt;:&lt;标签&gt; &lt;目标镜像名称&gt;:&lt;标签&gt;</td><td>给本地主机上的 Docker 镜像打标签，以便在推送到 Docker Hub 或其他镜像仓库时使用</td></tr><tr><td>docker build -t &lt;镜像名称&gt; &lt;Dockerfile 路径&gt;</td><td>使用 Dockerfile 构建新的 Docker 镜像，并指定镜像名称</td></tr><tr><td>docker push &lt;镜像名称&gt;</td><td>将本地主机上的 Docker 镜像推送到 Docker Hub 或其他镜像仓库</td></tr><tr><td>docker save &lt;镜像名称&gt; -o &lt;保存文件路径&gt;</td><td>将本地主机上的 Docker 镜像保存到指定路径的文件中，以便在其他计算机上导入镜像</td></tr><tr><td>docker load -i &lt;镜像文件路径&gt;</td><td>从指定路径的文件中导入 Docker 镜像到本地主机</td></tr></tbody></table><h4 id="_6-3-2-常见容器指令" tabindex="-1"><a class="header-anchor" href="#_6-3-2-常见容器指令" aria-hidden="true">#</a> 6.3.2 常见容器指令</h4><p>以下是Docker中常用的容器指令：</p><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><code>docker run</code></td><td>创建并启动一个容器</td></tr><tr><td>docker ps</td><td>列出当前正在运行的容器</td></tr><tr><td>docker ps -a</td><td>查看所有的Docker容器，包括正在运行和已经停止的容器</td></tr><tr><td>docker ps -a --filter &quot;name=&lt;容器名称或部分名称&gt;</td><td>过滤显示特定的Docker容器</td></tr><tr><td>docker stop</td><td>停止一个正在运行的容器</td></tr><tr><td>docker start</td><td>启动一个停止的容器</td></tr><tr><td>docker restart</td><td>重启一个容器</td></tr><tr><td>docker rm</td><td>删除一个容器</td></tr><tr><td>docker exec</td><td>在运行的容器中执行命令</td></tr><tr><td>docker logs</td><td>查看容器的日志输出</td></tr><tr><td>docker inspect</td><td>查看容器的详细信息</td></tr><tr><td>docker build</td><td>根据 Dockerfile 构建镜像</td></tr><tr><td>docker push</td><td>将本地的镜像上传到 Docker Hub 等镜像仓库</td></tr><tr><td>docker pull</td><td>从镜像仓库拉取镜像到本地</td></tr><tr><td>docker commit</td><td>将一个容器的修改保存为一个新的镜像</td></tr><tr><td>docker save</td><td>将镜像保存为 tar 文件</td></tr><tr><td>docker load</td><td>从 tar 文件中加载镜像</td></tr></tbody></table><h4 id="_6-3-3-拉取镜像错误" tabindex="-1"><a class="header-anchor" href="#_6-3-3-拉取镜像错误" aria-hidden="true">#</a> 6.3.3 拉取镜像错误</h4><p>这个错误通常表示当前用户没有访问 Docker 守护进程的权限。为了解决这个问题，您可以尝试以下方法：</p><ol><li>确保您在执行 Docker 命令时已经使用了 <code>sudo</code> 命令以管理员身份运行，例如：</li></ol><div class="language-linux line-numbers-mode" data-ext="linux"><pre class="language-linux"><code>  sudo docker pull nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>将当前用户添加到 <code>docker</code> 用户组中，以便允许该用户访问 Docker 守护进程。请按照以下步骤操作：</li></ol><p>a. 打开终端或 PowerShell 窗口。</p><p>b. 输入以下命令并运行：</p><div class="language-Linux line-numbers-mode" data-ext="Linux"><pre class="language-Linux"><code>sudo usermod -aG docker $USER
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>$USER</code> 表示当前登录的用户名。</p><p>c. 退出当前终端或 PowerShell 窗口，并重新登录以使更改生效。</p><ol start="3"><li>确保 Docker 守护进程的套接字文件 <code>/var/run/docker.sock</code> 的权限正确。请按照以下步骤操作：</li></ol><p>a. 打开终端或 PowerShell 窗口。</p><p>b. 输入以下命令并运行：</p><div class="language-Linux line-numbers-mode" data-ext="Linux"><pre class="language-Linux"><code>sudo chmod 666 /var/run/docker.sock
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>c. 如果问题仍然存在，请尝试重启 Docker 服务：</p><p>a. 打开终端或 PowerShell 窗口。</p><p>b. 输入以下命令并运行：</p><div class="language-Linux line-numbers-mode" data-ext="Linux"><pre class="language-Linux"><code>sudo systemctl restart docker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果您在执行上述步骤时仍然遇到问题，请确认您的操作系统和 Docker 版本是否兼容，并检查 Docker 安装和配置是否正确。</p><h4 id="_6-3-4-常见网络命令" tabindex="-1"><a class="header-anchor" href="#_6-3-4-常见网络命令" aria-hidden="true">#</a> 6.3.4 常见网络命令</h4><p><code>&lt;network_name&gt;</code>是网络的名称，<code>&lt;container_name&gt;</code>是容器的名称或ID</p><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td><strong>docker network create &lt;network_name&gt;</strong></td><td>创建一个新的Docker网络</td></tr><tr><td>docker network ls</td><td>列出当前主机上的所有Docker网络</td></tr><tr><td><strong>docker network inspect &lt;network_name&gt;</strong></td><td>显示指定Docker网络的详细信息</td></tr><tr><td>docker network connect &lt;network_name&gt; &lt;container_name&gt;</td><td>将指定的容器连接到指定的Docker网络</td></tr><tr><td><strong>docker network disconnect &lt;network_name&gt; &lt;container_name&gt;</strong></td><td>从指定的Docker网络中断开指定的容器</td></tr><tr><td>docker network rm &lt;network_name&gt;</td><td>删除指定的Docker网络</td></tr><tr><td><strong>docker network prune</strong></td><td>删除未被使用的Docker网络</td></tr></tbody></table><h4 id="_6-3-5-常见linux指令" tabindex="-1"><a class="header-anchor" href="#_6-3-5-常见linux指令" aria-hidden="true">#</a> 6.3.5 常见Linux指令</h4><ol><li>ls：列出目录中的文件和子目录。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ ls
file1.txt file2.txt file3.txt directory1 directory2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>cd：进入指定目录。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ cd directory1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>pwd：显示当前工作目录的路径。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ pwd
/home/user/directory1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>mkdir：创建一个新的目录。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ mkdir new_directory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>rmdir：删除一个空目录。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ rmdir empty_directory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6"><li>touch：创建一个新文件或更新已有文件的时间戳。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ touch file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="7"><li>cat：连接文件并打印输出。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ cat file.txt
This is the content of the file.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8"><li>cp：复制文件或目录。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ cp file.txt copy_of_file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="9"><li>mv：移动文件或目录，或重命名文件或目录。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ mv file.txt new_directory/file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="10"><li>rm：删除文件或目录。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ rm file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="11"><li>chmod：更改文件或目录的权限。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ chmod 755 script.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="12"><li>chown：更改文件或目录的所有者。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ chown user:group file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="13"><li>ps：显示当前正在运行的进程。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ ps
  PID TTY          TIME CMD
  112 pts/0    00:00:00 bash
  154 pts/0    00:00:00 ps
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="14"><li>top：显示系统中消耗资源最多的进程。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ top
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="15"><li>grep：在文件中搜索指定的模式。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ grep &quot;pattern&quot; file.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="16"><li>tar：归档或解压缩文件或目录。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ tar -cvf archive.tar file1 file2
$ tar -xvf archive.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="17"><li>ssh：建立安全的远程连接。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ ssh user@remote_host
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="18"><li>scp：在本地和远程主机之间传输文件。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ scp file.txt user@remote_host:/remote/path
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="19"><li>ping：测试主机之间的连接性和延迟时间。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ ping google.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="20"><li>ifconfig：显示网络接口的配置信息。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ ifconfig
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="21"><li>执行更高权限指令（获得root权限）</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ sudo apt-get update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="22"><li>切换至root</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ sudo su
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="23"><li>查找指定端口进程</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ sudo lsof -i :80
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="24"><li>杀死进程,根据进程pid杀死进程</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ kill 1234
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6-3-6-run命令" tabindex="-1"><a class="header-anchor" href="#_6-3-6-run命令" aria-hidden="true">#</a> 6.3.6 run命令</h4><ol><li><p><code>docker run</code> 命令指定要使用的 Docker 镜像。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ docker run image_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>--name</code> 选项指定容器的名称。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ docker run --name my_container image_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>-p</code> 选项将容器内部的端口映射到主机的端口。左边宿主机端口，右边是容器端口</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ docker run -p 80:80 image_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>-v</code> 选项将容器内部的路径映射到主机上的路径，以便在容器和主机之间共享数据，左边主机右边容器</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ docker run -v /host/path:/container/path image_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>-e</code> 选项设置容器内的环境变量。在容器内设置一个名为 <code>MY_VAR</code> 的环境变量，并将其值设置为 <code>value</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ docker run -e MY_VAR=value image_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>--entrypoint</code> 选项指定容器启动时要运行的命令，容器启动时运行 <code>/bin/bash</code> 命令</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ docker run --entrypoint /bin/bash image_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>--cpus</code> 和 <code>--memory</code> 选项限制容器可以使用的 CPU 和内存资源</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ docker run --cpus=1 --memory=1g image_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>配置容器开机自启动</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ docker run --restart=always image_name
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>设置已运行的容器开机自启动</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker update --restart=always 容器名称或者ID例如750
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="_6-4-数据卷" tabindex="-1"><a class="header-anchor" href="#_6-4-数据卷" aria-hidden="true">#</a> 6.4 数据卷</h3><h4 id="_6-4-1-数据卷简介" tabindex="-1"><a class="header-anchor" href="#_6-4-1-数据卷简介" aria-hidden="true">#</a> 6.4.1 数据卷简介</h4><p>**数据卷（Volume）**是Docker中一种用于持久化存储容器数据的机制，它将主机上的目录或文件挂载到容器内部的指定目录，使得容器内部的数据可以被持久化到主机上的文件系统中，即使容器被删除或重新创建，数据仍然可以被保留。<br> 数据卷是容器中虚拟的文件或目录，指向宿主中真实文件或目录。</p><p>使用数据卷的好处包括：</p><ol><li><p>数据持久化：通过数据卷，容器的数据可以在容器被删除或停止后仍然保留在主机上，从而避免数据丢失。</p></li><li><p>数据共享：多个容器可以共享同一个数据卷，从而实现数据共享和通信。</p></li><li><p>数据备份和恢复：通过备份数据卷，可以方便地进行数据备份和恢复。</p></li></ol><p>在Docker中，可以使用<code>docker volume create</code>命令来创建一个数据卷，然后使用<code>docker run</code>命令时使用<code>-v</code>选项将数据卷挂载到容器内部的指定目录中，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker volume create mydata
docker run -v mydata:/data myimage上述命令会将名为\`mydata\`的数据卷挂载到容器内部的\`/data\`目录中。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>除了使用命令行，也可以在<code>docker-compose.yml</code>文件中定义数据卷，例如：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
 <span class="token key atrule">myservice</span><span class="token punctuation">:</span>
  <span class="token key atrule">image</span><span class="token punctuation">:</span> myimage
  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
    mydata<span class="token punctuation">:</span>/data
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述<code>docker-compose.yml</code>文件中使用<code>volumes</code>关键字定义了名为<code>mydata</code>的数据卷，并在<code>myservice</code>服务中将其挂载到容器内部的<code>/data</code>目录中。</p><h4 id="_6-4-2-数据卷指令" tabindex="-1"><a class="header-anchor" href="#_6-4-2-数据卷指令" aria-hidden="true">#</a> 6.4.2 数据卷指令</h4><p>以下是Docker中常用的数据卷操作指令：</p><ol><li><code>docker volume create</code> – 创建一个数据卷</li><li><code>docker volume inspect</code> – 查看数据卷的详细信息</li><li><code>docker volume ls</code> – 列出所有数据卷</li><li><code>docker volume prune</code> – 删除所有未被使用的数据卷</li><li><code>docker run -v</code> – 在容器中挂载一个数据卷</li><li><code>docker volume rm</code> – 删除一个指定的数据卷</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -v mydata:/data myimage
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述命令将名为 <code>mydata</code> 的数据卷挂载到容器内部的 <code>/data</code> 目录上</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker volume rm mydata
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述命令将名为 <code>mydata</code> 的数据卷删除。需要注意的是，在删除数据卷之前，需要先停止正在使用该数据卷的容器。</p><h3 id="_6-5-dockerfile自定义镜像" tabindex="-1"><a class="header-anchor" href="#_6-5-dockerfile自定义镜像" aria-hidden="true">#</a> 6.5 Dockerfile自定义镜像</h3>`,104),y={href:"https://docs.docker.com/engine/reference/builder",target:"_blank",rel:"noopener noreferrer"},f=d(`<h4 id="_6-5-1镜像结构" tabindex="-1"><a class="header-anchor" href="#_6-5-1镜像结构" aria-hidden="true">#</a> 6.5.1镜像结构</h4><p>Docker的镜像结构主要由多个镜像层（Image Layer）组成，每个镜像层都包含了一些文件系统的变化。镜像层采用了联合文件系统（UnionFS）的技术，即将多个文件系统层联合起来呈现为一个统一的文件系统，从而实现了镜像的分层存储。</p><p>具体来说，每个镜像层都是只读的，并且是在上一个镜像层的基础上进行的修改。当创建新的镜像时，Docker会将这些镜像层堆叠在一起，形成一个新的镜像。由于镜像层是只读的，因此创建新的镜像不会改变原有的镜像层，从而实现了镜像的可重用性和高效性。</p><h4 id="_6-5-2-dockerfile语法" tabindex="-1"><a class="header-anchor" href="#_6-5-2-dockerfile语法" aria-hidden="true">#</a> 6.5.2 Dockerfile语法</h4><p>Dockerfile是一个文本文件，用于<strong>定义Docker</strong>镜像的构建方式和配置信息（可以将一个SpringBoot工程定义为一个镜像）。Dockerfile中包含了一系列的指令和参数，用于描述镜像的构建过程、所需的环境和依赖关系等信息。</p><ul><li>基本指令</li></ul><ol><li>FROM – 定义基础镜像，即当前镜像继承的父镜像。</li><li>MAINTAINER – 定义镜像的维护者。</li><li>RUN – 定义在镜像构建过程中需要执行的命令。</li><li>CMD – 定义容器启动时需要执行的命令。</li><li>EXPOSE – 定义容器暴露的端口。</li><li>ENV – 定义环境变量。</li><li>ADD/COPY – 将文件或目录从主机复制到镜像中。</li><li>VOLUME – 定义容器的挂载点，用于持久化存储数据。</li><li>WORKDIR – 定义容器中的工作目录。</li><li>USER – 定义容器运行时的用户。</li><li>ARG – 定义构建时的参数。</li><li>ONBUILD – 定义一个镜像，该镜像会在其他镜像中作为基础镜像时触发执行。</li><li>LABEL – 定义镜像的元数据，例如版本、描述等信息。</li></ol><ul><li>DockerFile示例</li></ul><p>下面是使用 Java 的 Dockerfile 示例，用于构建一个 Spring Boot 应用程序的镜像：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code><span class="token comment"># 指定基础镜像</span>
<span class="token instruction"><span class="token keyword">FROM</span> openjdk:11-jre-slim</span>

<span class="token comment"># 设置工作目录</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>

<span class="token comment"># 复制应用程序代码</span>
<span class="token instruction"><span class="token keyword">COPY</span> target/myapp.jar .</span>

<span class="token comment"># 暴露端口</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8080</span>

<span class="token comment"># 在容器启动时运行应用程序</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;java&quot;</span>, <span class="token string">&quot;-jar&quot;</span>, <span class="token string">&quot;myapp.jar&quot;</span>]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该 Dockerfile 的解释如下：</p><ol><li><p><code>FROM</code> 指令指定基础镜像 <code>openjdk:11-jre-slim</code>。</p></li><li><p><code>WORKDIR</code> 指令设置工作目录为 <code>/app</code>。</p></li><li><p><code>COPY</code> 指令将构建后的应用程序 <code>myapp.jar</code> 复制到镜像中。</p></li><li><p><code>EXPOSE</code> 指令指定容器监听的端口 <code>8080</code>。</p></li><li><p><code>CMD</code> 指令在容器启动时运行命令 <code>java -jar myapp.jar</code>，其中 <code>myapp.jar</code> 是应用程序的可执行 JAR 文件。</p></li></ol><p>该 Dockerfile 用于构建一个 Spring Boot 应用程序的镜像，该应用程序在容器启动时会监听端口 <code>8080</code>。你可以使用以下命令构建该镜像：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> build <span class="token parameter variable">-t</span> my_spring_boot_app <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 <code>-t</code> 参数指定镜像的名称为 <code>my_spring_boot_app</code>，<code>.</code> 表示 Dockerfile 文件所在目录。</p><p>然后，可以使用以下命令运行该镜像：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 my_spring_boot_app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 <code>-p</code> 参数将容器的端口 <code>8080</code> 映射到主机的端口 <code>8080</code>，从而使应用程序可以通过主机的 IP 地址进行访问。</p><ul><li>DockerFile存放位置</li></ul><p>通常情况下，Dockerfile 文件应该放在 Spring Boot 项目的<strong>根目录</strong>下。这样，当你在根目录下执行 <code>docker build</code> 命令时，Docker 会自动查找 Dockerfile 文件并使用它来构建镜像。</p><p>如果你的 Spring Boot 项目有多个模块，你可以在每个模块的根目录下分别创建 Dockerfile 文件，并在构建镜像时指定要使用的 Dockerfile 文件。例如，假设你有一个名为 <code>myapp</code> 的 Spring Boot 项目，其中包括一个名为 <code>web</code> 的模块和一个名为 <code>service</code> 的模块，那么你可以在 <code>myapp</code> 的根目录下创建一个名为 <code>Dockerfile</code> 的文件，并在 <code>web</code> 模块和 <code>service</code> 模块的根目录下分别创建名为 <code>Dockerfile.web</code> 和 <code>Dockerfile.service</code> 的文件。然后，你可以使用以下命令构建每个模块的镜像：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> build <span class="token parameter variable">-t</span> myapp-web <span class="token parameter variable">-f</span> web/Dockerfile.web <span class="token builtin class-name">.</span>
$ <span class="token function">docker</span> build <span class="token parameter variable">-t</span> myapp-service <span class="token parameter variable">-f</span> service/Dockerfile.service <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>-t</code> 参数指定镜像的名称，<code>-f</code> 参数指定要使用的 Dockerfile 文件，<code>.</code> 表示 Dockerfile 文件所在目录。</p><h3 id="_6-6-dockercompose文件" tabindex="-1"><a class="header-anchor" href="#_6-6-dockercompose文件" aria-hidden="true">#</a> 6.6 DockerCompose文件</h3>`,24),w={href:"https://docs.docker.com/compose/compose-file/",target:"_blank",rel:"noopener noreferrer"},L=d(`<h4 id="_6-6-1-概念" tabindex="-1"><a class="header-anchor" href="#_6-6-1-概念" aria-hidden="true">#</a> 6.6.1 概念</h4><p>Docker Compose 是一个用于定义和运行多个 Docker 容器的工具，它可以让你轻松地定义和管理多个容器应用程序的组件，以及它们之间的相互关系和依赖关系。</p><p>通常情况下，一个容器应用程序可能由多个容器组成，例如一个 Web 应用程序可能需要一个 Web 服务器容器、一个数据库容器和一个缓存容器。使用 Docker Compose，你可以使用 Docker Compose 文件来定义这些容器，以及它们之间的相互关系和依赖关系，然后使用 <code>docker-compose</code> 命令来启动、停止和管理这些容器。</p><p>Docker Compose 文件使用 YAML 格式编写，它包含了一些基本的元素，例如服务、容器、网络和卷。通过定义这些元素，你可以轻松地创建一个完整的容器应用程序。</p><h4 id="_6-6-2-示例" tabindex="-1"><a class="header-anchor" href="#_6-6-2-示例" aria-hidden="true">#</a> 6.6.2 示例</h4><p>以下是一个简单的 Docker Compose 文件示例，用于定义一个 Web 应用程序的容器组成部分：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;8000:8000&quot;</span>
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> db
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">POSTGRES_PASSWORD</span><span class="token punctuation">:</span> mypassword
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该 Docker Compose 文件中包含两个服务 <code>web</code> 和 <code>db</code>，分别对应 Web 服务器容器和数据库容器。<code>web</code> 服务使用 Dockerfile 构建镜像，并将容器端口 <code>8000</code> 映射到主机端口 <code>8000</code>，同时指定了 <code>db</code> 服务为它的依赖项。<code>db</code> 服务使用 Postgres 镜像，并设置了 <code>POSTGRES_PASSWORD</code> 环境变量。</p><p>使用以下命令可以启动该容器应用程序：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker-compose</span> up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令会启动 <code>web</code> 和 <code>db</code> 服务，并创建对应的容器。你可以使用以下命令来停止容器应用程序：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker-compose</span> down
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 Docker Compose 可以轻松地定义和管理多个容器应用程序的组件和依赖关系，从而简化了容器化应用程序的开发和部署过程。</p>`,13);function S($,E){const n=t("ExternalLinkIcon");return r(),l("div",null,[c,p,a("p",null,[e("官网："),a("a",u,[e("https://www.docker.com/"),s(n)])]),v,a("p",null,[e("官方网站上有各种环境下的 "),a("a",m,[e("安装指南"),s(n)]),e("，这里主要介绍 Docker CE 在 CentOS上的安装。")]),k,a("p",null,[e("参考阿里云的镜像加速文档："),a("a",b,[e("https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors"),s(n)])]),g,a("p",null,[e("搭建镜像仓库可以基于Docker官方提供的DockerRegistry来实现。官网地址："),a("a",h,[e("https://hub.docker.com/_/registry"),s(n)])]),x,a("p",null,[e("访问"),a("a",_,[e("http://YourIp:5000/v2/_catalog"),s(n)]),e(" 可以查看当前私有镜像服务中包含的镜像")]),D,a("p",null,[e("官网文档： "),a("a",y,[e("https://docs.docker.com/engine/reference/builder"),s(n)])]),f,a("p",null,[e("DockerCompose的详细语法参考官网："),a("a",w,[e("https://docs.docker.com/compose/compose-file/"),s(n)])]),L])}const R=i(o,[["render",S],["__file","docker.html.vue"]]);export{R as default};
