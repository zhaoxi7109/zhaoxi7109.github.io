import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as i,c as o,a as n,e as s,b as t,d as e}from"./app-9f31e196.js";const c={},u=e('<h1 id="springboot" tabindex="-1"><a class="header-anchor" href="#springboot" aria-hidden="true">#</a> SpringBoot</h1><h2 id="_1-入门" tabindex="-1"><a class="header-anchor" href="#_1-入门" aria-hidden="true">#</a> 1. 入门</h2><h3 id="_1-1-项目创建" tabindex="-1"><a class="header-anchor" href="#_1-1-项目创建" aria-hidden="true">#</a> 1.1 项目创建</h3>',3),r={href:"https://start.spring.io",target:"_blank",rel:"noopener noreferrer"},d=n("li",null,[n("p",null,"idea创建")],-1),k={href:"https://start.aliyun.com/",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,[n("p",null,"手工创建：创建普通的Maven项目，导入相关依赖")],-1),m=e(`<p>spring-boot-starter是SpringBoot项目最基础的依赖，有这个依赖就是SpringBoot项目</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>//spring-boot-starter-test 整合测试用的
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>  <span class="token comment">//启动类、引导类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootConfigurationApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConfigurableApplicationContext</span> configurableApplicationContext <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringBootConfigurationApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//args中存储的是临时属性</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Rest风格</p><p>REST是一种Web应用程序架构风格，它基于HTTP协议，通过使用统一资源标识符（URI）和HTTP动词（GET，POST，PUT，DELETE等）来实现客户端和服务器之间的通信。</p><p>REST风格的API通常使用JSON或XML格式来传输数据</p><ul><li><p>Restful</p></li><li><p>Rest和Restful的区别</p><p>REST是一种架构风格，而RESTful是符合REST架构风格的Web服务。</p></li></ul><h3 id="_1-2-配置文件" tabindex="-1"><a class="header-anchor" href="#_1-2-配置文件" aria-hidden="true">#</a> 1.2 配置文件</h3><ul><li><p>类型</p><ul><li>application.properties</li><li>application.yml</li><li>application.yaml</li></ul></li><li><p>优先级</p><ul><li>properties - yml -yaml</li></ul></li></ul><h3 id="_1-3-yml文件" tabindex="-1"><a class="header-anchor" href="#_1-3-yml文件" aria-hidden="true">#</a> 1.3 yml文件</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">user</span><span class="token punctuation">:</span>
  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">14</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> zs
  <span class="token key atrule">subject</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> java
    <span class="token punctuation">-</span> python
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上结构类似于以下</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
   <span class="token property">&quot;user&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
       <span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">14</span><span class="token punctuation">,</span> 
       <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;zs&quot;</span><span class="token punctuation">,</span>
       <span class="token property">&quot;subject&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;python&quot;</span><span class="token punctuation">]</span>
          <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-1-yml文件概括" tabindex="-1"><a class="header-anchor" href="#_1-3-1-yml文件概括" aria-hidden="true">#</a> 1.3.1 yml文件概括</h4><p>YAML（Yet Another Markup Language）是一种轻量级的数据序列化格式，yml文件是一种遵循YAML语法规则的文件，通常用于配置文件、数据序列化和交换等应用场景。</p><p>语法规则</p><p>1. 大小写敏感：YAML是大小写敏感的<br> 2. 使用缩进表示层次结构：YAML使用缩进来表示层次结构，每个缩进为2个空格。子项比父项缩进2个空格。<br> 3. 使用冒号分隔键和值：键和值之间使用冒号“:”分隔，冒号后面必须有一个空格。<br> 4. 使用短横线表示列表项：列表项使用短横线“-”表示，每个短横线后面必须有一个空格。<br> 5. 字符串表示：YAML中的字符串可以使用单引号、双引号或无引号表示。当字符串中包含特殊字符时，必须使用引号。<br> 6. 注释：注释使用井号“#”表示，从该符号开始到行末为注释，不会被解析。<br> 7.数值可以是2进制，8进制，10进制，16进制，所以如果数值比较特殊时最好用引号，不然可能会识别成其它进制。<br> 8.使用 ~ 表示null。<br> 示例如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 注释</span>
<span class="token key atrule">name</span><span class="token punctuation">:</span> John
<span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">25</span>
<span class="token key atrule">address</span><span class="token punctuation">:</span>
  city<span class="token punctuation">:</span> Beijing
  street<span class="token punctuation">:</span> Chaoyang Road
<span class="token key atrule">hobbies</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> reading
  <span class="token punctuation">-</span> music
  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该YAML文件表示一个包含三个键值对和一个列表的数据结构，其中address是一个嵌套的键值对，表示一个包含城市和街道信息的地址，hobbies是一个包含两个元素的列表，表示John的爱好是阅读和音乐。</p><h4 id="_1-3-2-获取yml文件中的值" tabindex="-1"><a class="header-anchor" href="#_1-3-2-获取yml文件中的值" aria-hidden="true">#</a> 1.3.2 获取yml文件中的值</h4><ul><li><p>取值一，通过@Value将值注入类中属性</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${user.age}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>取值二，借助Environment对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//Environment对象中存储了yml配置文件中所有值</span>
<span class="token annotation punctuation">@Autowired</span><span class="token comment">//自动装配获取environment对象</span>
<span class="token keyword">private</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;user.age&quot;</span><span class="token punctuation">)</span><span class="token comment">//获取具体值  </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>取值三，创建类并通过注解映射yml文件中对应值</p></li></ul><p>将yml文件中值以对象形式使用，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span> <span class="token comment">//设置为Bean，受Spring管理</span>
<span class="token comment">//关联到yml文件中对应值</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span> <span class="token comment">//这个注解比较重要，自动让属性与yml文件中user对应</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//对应yml文件中user.name</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token comment">//对应yml文件中user.age</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">User</span> user<span class="token punctuation">;</span><span class="token comment">//yml文件中的值被转为对象形式使用</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>都可以用于第三方Bean的属性值设置，一般一二种居多<br> 注：@ConfigurationProperties注解可能会出现未配置SpringBoot配置注解处理器， 此时需要导包，重启</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-整合" tabindex="-1"><a class="header-anchor" href="#_2-整合" aria-hidden="true">#</a> 2. 整合</h2><h3 id="_2-1-整合junit" tabindex="-1"><a class="header-anchor" href="#_2-1-整合junit" aria-hidden="true">#</a> 2.1 整合JUnit</h3><p>单元测试</p><h3 id="_2-2-整合mybatis" tabindex="-1"><a class="header-anchor" href="#_2-2-整合mybatis" aria-hidden="true">#</a> 2.2 整合Mybatis</h3><ol><li>导依赖</li></ol><p>可以在创建SpringBoot工程时勾选<strong>Mysql Driver</strong> 和 <strong>Mybatis Framework</strong>，也可以之后手动导入相关依赖</p><p>Mysql Driver是与MySQL相关的依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>配置</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mp
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
//指明 druid，没有使用druid则不写
    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource
     <span class="token comment">#注：mysql8及以上的可能需要设置服务器时区 ?serverTimezone=UTC</span>
    <span class="token comment">#这里只是配置mysql，mybatis没有配置</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//dao层</span>
<span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookDao</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from user where id = #{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Book</span> <span class="token function">bookById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-整合mybatis-plus" tabindex="-1"><a class="header-anchor" href="#_2-3-整合mybatis-plus" aria-hidden="true">#</a> 2.3 整合Mybatis-plus</h3>`,39),b={href:"https://baomidou.com/",target:"_blank",rel:"noopener noreferrer"},g=e(`<ol><li>添加依赖</li></ol><p>Spring官方并没有收录MP ，所以无法通过直接勾选的方式导入依赖， 之前可以选择通过阿里云地址创建SpringBoot项目勾选MP，但现在阿里云似乎没有</p><p>创建时只勾选Mysql Driver ，Mybatis-plus依赖 手工导入</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 数据库连接池--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 如果勾选了Mysql Driver就不用再次导入--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.28<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mybatis-plus-boot-starter 依赖中包含了 spring-boot-starter 所以后者可以删除</p><p>依赖版本不匹配会导致自动装配报错</p><ol start="2"><li>配置在application中配置数据库连接信息</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#配置MySQL</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span> <span class="token comment">#数据库连接池的配置</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mp
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span> <span class="token comment">#mybatis-plus的配置，与Spring同级别</span>
  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>
    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>
      <span class="token key atrule">table-prefix</span><span class="token punctuation">:</span> _b <span class="token comment">#配置匹配数据库的表名是以 _b 开头</span>
      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto <span class="token comment">#配置id为自增长</span>
  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>
    <span class="token comment">#配置日志输出到控制台</span>
    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span>  org.apache.ibatis.logging.stdout.StdOutImpl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：数据库id自增默认按照UUID雪花算法生成long类型的id，是随机的，id-type: auto 设置id根据数据库表id自增，同时数据库表的id也要设置为自增长，不然会报错<strong>Error updating database. Cause: java.sql.SQLException: Field &#39;id&#39; doesn&#39;t have a default value</strong></p><ol start="3"><li>关联表名</li></ol><p>mybatis 默认会以实体类的名字作为表名，所以当表名与实体类名不一致时会报错<strong>java.sql.SQLSyntaxErrorException: Table &#39;mp.book&#39; doesn&#39;t exist</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">&quot;books&quot;</span><span class="token punctuation">)</span>  <span class="token comment">//添加在实体类上，为实体类指明对应的表名</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Book</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>编写Dao层</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//dao层，去操作数据库</span>
<span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token comment">//继承BaseMapper类</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>分页功能的实现</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">IPage</span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span><span class="token number">3L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userDao<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分页功能需要配置拦截器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token comment">//定义成配置Bean</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> mpConfig <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mpInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//创建拦截器容器</span>
        <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//添加分页相关的拦截器</span>
        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进行条件查询（Wrapper条件对象）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token class-name">IPage</span> page1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//条件对象</span>
  wrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;zs&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  userDao<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>page1<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Lambda查询对象</span>
  <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> lambdaQueryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  lambdaQueryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">Book</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span><span class="token string">&quot;j&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  queryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;j&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  bookDao<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-整合druid" tabindex="-1"><a class="header-anchor" href="#_2-4-整合druid" aria-hidden="true">#</a> 2.4 整合druid</h3><ol><li>导依赖</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>spring中没有druid，手动导入，不是druid 而是 Druid Spring Boot Starter</p><ol start="2"><li>配置</li></ol><p>配置方法一：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#配置MySQL</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mp
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource <span class="token comment">#指明连接池</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置方法二·：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#配置MySQL</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">druid</span><span class="token punctuation">:</span>
      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mp
      <span class="token key atrule">username</span><span class="token punctuation">:</span> root
      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法二可能会报错 <strong>IllegalStateException</strong></p><h2 id="_3-项目结构" tabindex="-1"><a class="header-anchor" href="#_3-项目结构" aria-hidden="true">#</a> 3. 项目结构</h2><h3 id="_3-1-三层架构" tabindex="-1"><a class="header-anchor" href="#_3-1-三层架构" aria-hidden="true">#</a> 3.1 三层架构</h3><p>三层架构是一种常见的软件架构模式，它将应用程序划分为三个主要部分：表示层、业务逻辑层和数据访问层。每个层次都有其独特的责任，可以独立开发、测试和维护，同时也能够相互协作，共同完成应用程序的功能。</p><p>下面是三层架构的各个层次及其职责：</p><ol><li>表示层</li></ol><p>表示层是应用程序的用户界面，它负责与用户进行交互，并将用户的请求发送到业务逻辑层。表示层通常包括以下组件：</p><ul><li><p>用户界面：包括Web界面、移动应用程序界面等，用于与用户进行交互。</p></li><li><p>控制器：负责接收和处理用户请求，将请求转发给业务逻辑层。</p></li><li><p>视图：负责显示数据和结果，通常是HTML页面、移动应用程序界面等。</p></li></ul><p>表示层的主要职责是将用户请求转发给业务逻辑层，并将业务逻辑层的结果呈现给用户。</p><ol start="2"><li>业务逻辑层</li></ol><p>业务逻辑层是应用程序的核心部分，它负责处理业务逻辑和数据处理。业务逻辑层通常包括以下组件：</p><ul><li><p>业务逻辑：负责处理业务逻辑，包括计算、验证、控制和处理数据等。</p></li><li><p>服务：提供业务逻辑的服务，通常是Java类或C#类。</p></li><li><p>数据访问对象（DAO）：封装数据访问逻辑，负责与数据访问层进行交互。</p></li></ul><p>业务逻辑层的主要职责是处理业务逻辑和数据处理，以及与数据访问层进行交互。</p><ol start="3"><li>数据访问层</li></ol><p>数据访问层是应用程序与数据库之间的接口，它负责与数据库进行交互，执行数据访问操作。数据访问层通常包括以下组件：</p><ul><li><p>数据库：存储数据的地方。</p></li><li><p>数据访问对象（DAO）：封装数据访问逻辑，负责与业务逻辑层进行交互。</p></li><li><p>ORM框架：用于将数据库表映射到Java或C#对象，提供面向对象的数据访问接口。</p></li></ul><p>数据访问层的主要职责是与数据库进行交互，并执行数据访问操作。</p><p>controller web层、表现层</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//web层 mvc中的c，接收前端请求</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span><span class="token keyword">int</span> id1<span class="token punctuation">)</span><span class="token punctuation">{</span>
        userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用业务层</span>
        <span class="token keyword">return</span> <span class="token string">&quot;users all&quot;</span><span class="token punctuation">;</span><span class="token comment">//响应前端数据</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>service层 业务层</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span><span class="token comment">//定义成Bean</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserDao</span> userDao<span class="token punctuation">;</span><span class="token comment">//获取数据层对象</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//当增加操作时调用对应的数据层方法</span>
        <span class="token keyword">return</span> userDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//使用MP的Service接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> mpUserService <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">//IService中自带了大量通用方法,操作数据库</span>
<span class="token punctuation">}</span>

<span class="token comment">//使用MP的Service实现类</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> mpUserServiceImpl <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDao</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> mpUserService<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>dao层 数据层</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//dao层，去操作数据库</span>
<span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from user where id = #{id}&quot;</span><span class="token punctuation">)</span>
     <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> selectById <span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
  <span class="token comment">//dao层，去操作数据库,使用MP</span>
  <span class="token annotation punctuation">@Mapper</span>
  <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
      <span class="token comment">//接口继承了BaseMapper类提供许多有关增删改查的方法，故不用手动写sql方法了</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-前后端数据协议" tabindex="-1"><a class="header-anchor" href="#_3-2-前后端数据协议" aria-hidden="true">#</a> 3.2 前后端数据协议</h3><p>自定义的统一的返回对象，规范后端向前端相应的数据的格式，便于使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">R</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span> flag<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span> flag<span class="token punctuation">,</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-运维相关" tabindex="-1"><a class="header-anchor" href="#_4-运维相关" aria-hidden="true">#</a> 4. 运维相关</h2><h3 id="_4-1-打包" tabindex="-1"><a class="header-anchor" href="#_4-1-打包" aria-hidden="true">#</a> 4.1 打包</h3><p>Maven生命周期，先clean再package，跳过测试：打包时会默认执行测试文件中程序查询，所以一般要跳过测试 。打包完成后target目录中会生成一个jar包。运行jar包：可以在cmd中通过 java -jar jar包名 运行该jar包</p><h3 id="_4-2-windows端口指令" tabindex="-1"><a class="header-anchor" href="#_4-2-windows端口指令" aria-hidden="true">#</a> 4.2 windows端口指令</h3><p>查询正在用的所有端口</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>netstat -ano
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询指定端口</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>netstat -ano | findstr &quot;80&quot;
信息中包含80的都查，不是指80端口
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>根据进程PID查询进程</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- tasklist | findstr &quot;进程PID&quot;
- tasklist | findstr &quot;9480&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>根据PID杀死任务</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- taskkill /F / &quot;进程PID&quot;
- taskkill -f -pid &quot;9480&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>根据进程名称杀死任务</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>taskkill -f -t -im &quot;进程名称&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-3-临时属性" tabindex="-1"><a class="header-anchor" href="#_4-3-临时属性" aria-hidden="true">#</a> 4.3 临时属性</h3><ul><li>使用java -jar命令时用 --server.port 设置临时端口为8080</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>java -jar SpringBoot_ssmp-0.0.1-SNAPSHOT.jar --server.port=8080
java -jar SpringBoot_ssmp-0.0.1-SNAPSHOT.jar --server.port=8080 --新配置命令
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-配置" tabindex="-1"><a class="header-anchor" href="#_4-4-配置" aria-hidden="true">#</a> 4.4 配置</h3><ul><li><p>4级配置文件</p><ul><li>1级 file：config/application.yml</li><li>2级 file：application.yml</li><li>3级calsspath：config/application.yml</li><li>4级 classpath：application.yml</li></ul></li><li><p>多环境配置文件</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#应用环境</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> active
<span class="token punctuation">---</span>
  <span class="token comment">#生产环境</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> pro
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span> <span class="token comment">#指定服务的运行端口</span>
<span class="token punctuation">---</span> <span class="token comment">#通过短线分隔不同的环境</span>

<span class="token comment">#开发环境</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>
<span class="token punctuation">---</span>

<span class="token comment">#测试环境</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> test
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_4-5-热部署" tabindex="-1"><a class="header-anchor" href="#_4-5-热部署" aria-hidden="true">#</a> 4.5 热部署</h3><h4 id="_4-5-1-概念" tabindex="-1"><a class="header-anchor" href="#_4-5-1-概念" aria-hidden="true">#</a> 4.5.1 概念</h4><p>热部署（Hot Deployment）指的是在运行状态下，不需要停止应用程序就能够更新应用程序的部分或全部内容。热部署可以提高应用程序的可用性和可维护性，避免了因为停止应用程序而导致的停机时间。在Java应用程序中，热部署可以通过以下方式实现：</p><p>1. 使用JRebel工具：JRebel是一个Java开发工具，可以实现Java应用程序的热部署。它通过在运行时动态地加载新的类文件，不需要重新启动应用程序就可以更新应用程序的代码和配置。<br> 2. 使用Spring Boot DevTools：Spring Boot DevTools是一个开发工具，可以实现Spring Boot应用程序的热部署。它可以监控应用程序的代码和资源文件的变化，当检测到变化时，自动重启应用程序。<br> 3. 使用OSGI框架：OSGI是一个Java模块化框架，可以实现Java应用程序的热部署。它通过将应用程序划分为多个模块，每个模块可以独立地更新和部署，不需要重新启动整个应用程序。<br> 4. 使用Java Agent：Java Agent是一个Java运行时工具，可以在运行时修改Java应用程序的字节码，实现热部署。它可以通过Java Instrumentation API来实现。<br> Spring Boot DevTools可以在创建项目时勾选</p><h4 id="_4-5-2-使用spring-boot-devtools实现热部署" tabindex="-1"><a class="header-anchor" href="#_4-5-2-使用spring-boot-devtools实现热部署" aria-hidden="true">#</a> 4.5.2 使用Spring Boot DevTools实现热部署</h4><ol><li>导包，也可以创建时勾选对应</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>idea工具中找到 <strong>构建-&gt;构建项目</strong> 就能刷新项目，但每次都需要手动点击</p></li><li><p>开启自动构建</p></li></ol><p>在idea中找到 设置-&gt;构建，执行，部署-&gt;编译器-&gt;自动部署项目</p><p>使用快捷键 ctrl+shift+alt+/ 进入注册表，勾选compiler.automake.allow.when.app.running</p><ol start="4"><li>范围配置</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#设置static文件夹下的都不参与热部署</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>      
  <span class="token key atrule">devtools</span><span class="token punctuation">:</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span>
      <span class="token key atrule">exclude</span><span class="token punctuation">:</span> static/<span class="token important">**</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有些文件默认不参与热部署，例如静态资源</p><h3 id="_4-6-属性绑定" tabindex="-1"><a class="header-anchor" href="#_4-6-属性绑定" aria-hidden="true">#</a> 4.6 属性绑定</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix<span class="token operator">=</span><span class="token string">&quot;servers&quot;</span><span class="token punctuation">)</span> <span class="token comment">//使用这个注解建立属性与yml文件中配置值的连接</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> ipAddress<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> timeout<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ServerConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//注册为将指定类注册为Bean，</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootConfigurationApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ConfigurableApplicationContext</span> configurableApplicationContext <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringBootConfigurationApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@EnableConfigurationProperties 注解只是让对应类为Bean，不用再添加@Component，并没有匹配yml文件值和对应类属性</p><h3 id="_4-7-宽松绑定" tabindex="-1"><a class="header-anchor" href="#_4-7-宽松绑定" aria-hidden="true">#</a> 4.7 宽松绑定</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix<span class="token operator">=</span><span class="token string">&quot;servers&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> ipAddress<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">long</span> timeout<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@ConfigurationProperties(prefix=&quot;servers&quot;) 中匹配yml文件中的属性时会忽略yml文件中属性的大小写，中划线，下划线，所以该注解是一个宽松注解</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">servers</span><span class="token punctuation">:</span>
<span class="token comment"># IDADDRESS: 192.168.0.1</span>
<span class="token comment"># id-address: 192.168.0.1</span>
<span class="token comment"># id_address: 192.168.0.1</span>
  <span class="token key atrule">idAddress</span><span class="token punctuation">:</span> 192.168.0.1
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>
  <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">-1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上这几种形式都可以匹配到idaddress</p><h3 id="_4-8-几门技术" tabindex="-1"><a class="header-anchor" href="#_4-8-几门技术" aria-hidden="true">#</a> 4.8 几门技术</h3><h4 id="_4-8-1-新时间单位" tabindex="-1"><a class="header-anchor" href="#_4-8-1-新时间单位" aria-hidden="true">#</a> 4.8.1 新时间单位</h4><p>Duration</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@DurationUnit</span><span class="token punctuation">(</span><span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span><span class="token constant">HOURS</span><span class="token punctuation">)</span><span class="token comment">//设置时间单位为H，默认为ms</span>
<span class="token keyword">private</span> <span class="token class-name">Duration</span> serverTimeOut<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-8-2-新存储单位" tabindex="-1"><a class="header-anchor" href="#_4-8-2-新存储单位" aria-hidden="true">#</a> 4.8.2 新存储单位</h4><p>DataSize</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@DataSizeUnit</span><span class="token punctuation">(</span><span class="token class-name">DataUnit</span><span class="token punctuation">.</span><span class="token constant">BYTES</span><span class="token punctuation">)</span>  <span class="token comment">// 默认是B</span>
<span class="token keyword">private</span> <span class="token class-name">DataSize</span> dataSize<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-8-3-validation" tabindex="-1"><a class="header-anchor" href="#_4-8-3-validation" aria-hidden="true">#</a> 4.8.3 Validation</h4><p>Validation是一种用于验证数据的框架，它可以帮助开发人员在应用程序中轻松地实现输入数据的验证。Validation框架可以对数据进行各种检查，例如数据格式、数据类型、数据长度、数据范围等，从而确保数据的有效性和完整性。</p><p>以下是一个使用Validation框架进行数据验证的简单案例，它演示了如何使用Validation框架来验证用户的输入数据。</p><ol><li>创建一个Java Web项目，添加Validation和Spring MVC的依赖。</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/javax.validation/validation-api --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>validation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.1.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>编写User类</li></ol><p>User类包括用户的姓名、年龄和电子邮件等属性，并使用Validation注解来定义各个属性的验证规则，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Validated</span>  <span class="token comment">//开启校验</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;姓名不能为空&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;年龄不能为空&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;年龄不能小于18岁&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;电子邮件格式不正确&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>

    <span class="token comment">// getter和setter方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，@NotBlank注解表示姓名不能为空，@NotNull和@Min注解表示年龄不能为空且年龄必须大于等于18岁，@Email注解表示电子邮件的格式必须正确。</p><ol start="3"><li>编写Controller</li></ol><p>接下来，我们需要编写一个Controller类来处理用户的输入数据，并使用Validation框架来进行数据验证，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/saveUser&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token class-name">User</span> user<span class="token punctuation">,</span> <span class="token class-name">BindingResult</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;errorPage&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 处理用户数据</span>
        <span class="token keyword">return</span> <span class="token string">&quot;successPage&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，<strong>@Valid</strong>注解表示对用户输入的数据进行验证，BindingResult参数用于接收验证结果，如果有错误，则跳转到errorPage页面，否则处理用户数据并跳转到successPage页面。</p><h4 id="_4-8-4-hibernate" tabindex="-1"><a class="header-anchor" href="#_4-8-4-hibernate" aria-hidden="true">#</a> 4.8.4 Hibernate</h4><h5 id="_4-8-4-1-概括" tabindex="-1"><a class="header-anchor" href="#_4-8-4-1-概括" aria-hidden="true">#</a> 4.8.4.1 概括</h5><p>Hibernate是一个Java持久化框架，它提供了一种对象/关系映射（ORM）的方式，将Java对象映射到关系型数据库中的表结构，从而使得Java开发人员可以更加方便地进行数据库操作。</p><p>Hibernate的主要作用包括：</p><ol><li>简化数据库访问</li></ol><p>Hibernate提供了一个面向对象的数据访问接口，使得开发人员可以使用对象的方式来访问数据库，而不必关心底层的数据库操作细节。开发人员可以使用Hibernate提供的API来执行查询、插入、更新和删除等操作，从而简化了数据库访问的流程。</p><ol start="2"><li>提高代码的可维护性和可重用性</li></ol><p>Hibernate提供了一种将Java对象映射到数据库表的方式，使得开发人员可以使用面向对象的方式来设计和实现数据模型。这种方式使得代码更加清晰、易于维护和重用，同时也使得开发人员更加专注于业务逻辑的实现。</p><ol start="3"><li>提高应用程序性能</li></ol><p>Hibernate使用缓存技术来提高应用程序的性能。它可以缓存查询结果、对象等，从而减少了与数据库的交互次数，提高了应用程序的响应速度。</p><ol start="4"><li>支持多种数据库</li></ol><p>Hibernate支持多种数据库，包括Oracle、MySQL、SQL Server、DB2等，使得开发人员可以更加灵活地选择数据库。</p><h5 id="_4-8-4-2-基本使用" tabindex="-1"><a class="header-anchor" href="#_4-8-4-2-基本使用" aria-hidden="true">#</a> 4.8.4.2 基本使用</h5><p>以下是一个使用Hibernate的简单案例，它演示了如何使用Hibernate实现对数据库的增删改查操作。</p><ol><li>添加Hibernate和MySQL的依赖</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.hibernate.validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.0.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在项目中创建一个Hibernate配置文件，配置数据库连接信息和Hibernate的一些基本参数</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 数据库配置</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span> <span class="token comment">#数据源配置项，包括URL、用户名、密码和JDBC驱动类名</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mydb
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> mypassword
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver

<span class="token comment"># Hibernate配置</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>
    <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>
      <span class="token key atrule">dialect</span><span class="token punctuation">:</span> org.hibernate.dialect.MySQL8Dialect <span class="token comment">#表示Hibernate方言配置项，指定所使用的数据库方言</span>
      <span class="token key atrule">ddl-auto</span><span class="token punctuation">:</span> update <span class="token comment">#自动建表配置项，指定Hibernate在启动时是否自动创建数据库表结构</span>
      <span class="token key atrule">naming</span><span class="token punctuation">:</span> <span class="token comment">#表示命名策略配置项，指定Hibernate在处理实体类和数据库表名之间的映射时所使用的策略</span>
        <span class="token key atrule">physical-strategy</span><span class="token punctuation">:</span> org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">properties</span><span class="token punctuation">:</span>
      <span class="token key atrule">hibernate</span><span class="token punctuation">:</span> 
        <span class="token key atrule">format_sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 表示是否在控制台上打印Hibernate执行的SQL语句</span>
        <span class="token key atrule">use_sql_comments</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 示是否在Hibernate生成的SQL语句中包含注释。</span>
        <span class="token key atrule">generate_statistics</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#表示是否开启Hibernate的统计信息记录</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例配置文件中，使用了Spring Boot中的Spring Data JPA来简化Hibernate的配置</p><ol start="2"><li>实体类</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>  <span class="token comment">//表明为实体类</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span> <span class="token comment">//建立与对应表的映射</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Id</span> <span class="token comment">//指定主键</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span> <span class="token comment">//指定自增策略</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;email&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>

    <span class="token comment">// getter和setter方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>编写DAO类</li></ol><p>接下来，我们需要创建一个DAO类来实现对用户的增删改查操作。UserDAO类应该使用<strong>EntityManager</strong>来进行数据库操作，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDAO</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@PersistenceContext</span>
    <span class="token keyword">private</span> <span class="token class-name">EntityManager</span> entityManager<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> entityManager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        entityManager<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        entityManager<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        entityManager<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CriteriaBuilder</span> builder <span class="token operator">=</span> entityManager<span class="token punctuation">.</span><span class="token function">getCriteriaBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> criteria <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> root <span class="token operator">=</span> criteria<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        criteria<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> entityManager<span class="token punctuation">.</span><span class="token function">createQuery</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResultList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>测试代码</li></ol><p>最后，我们需要编写一些测试代码来测试我们的DAO类是否正常工作。例如，我们可以使用JUnit编写一些测试方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDAOTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">UserDAO</span> userDAO<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSave</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">&quot;zhangsan@example.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDAO<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertNotNull</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">&quot;lisi@example.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDAO<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;王五&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDAO<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">User</span> updatedUser <span class="token operator">=</span> userDAO<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span> updatedUser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;赵六&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">&quot;zhaoliu@example.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDAO<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Long</span> id <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDAO<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">User</span> deletedUser <span class="token operator">=</span> userDAO<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertNull</span><span class="token punctuation">(</span>deletedUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">User</span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user1<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">&quot;zhangsan@example.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDAO<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">User</span> user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user2<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user2<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">&quot;lisi@example.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDAO<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> userDAO<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> userList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-9-测试" tabindex="-1"><a class="header-anchor" href="#_4-9-测试" aria-hidden="true">#</a> 4.9 测试</h3><p>设置临时属性</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>properties <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;test.prop=testValue&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//设置临时属性</span>
<span class="token keyword">class</span> <span class="token class-name">SpringBootConfigurationApplicationTests</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${test.prop}&quot;</span><span class="token punctuation">)</span><span class="token comment">//使用临时属性</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> test<span class="token punctuation">;</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>}</p><p>@SpringBootTest(properties = {&quot;test.prop=testValue&quot;})</p><p>@SpringBootTest(args = {&quot;test.prop=testValue&quot;})，类似于在命令行中添加临时属性，所以优先级高于properties，优先级高于yml中属性</p><h2 id="_5-数据层解决方案" tabindex="-1"><a class="header-anchor" href="#_5-数据层解决方案" aria-hidden="true">#</a> 5. 数据层解决方案</h2><h3 id="_5-1-sql" tabindex="-1"><a class="header-anchor" href="#_5-1-sql" aria-hidden="true">#</a> 5.1 SQL</h3><p>关系型数据库遵循ACID规则，事务在英文中是transaction，和现实世界中的交易很类似，它有如下四个特性：</p><ol><li>(Atomicity) 原子性</li></ol><p>原子性很容易理解，也就是说事务里的所有操作要么全部做完，要么都不做，事务成功的条件是事务里的所有操作都成功，只要有一个操作失败，整个事务就失败，需要回滚。<br> 比如银行转账，从A账户转100元至B账户，分为两个步骤：1）从A账户取100元；2）存入100元至B账户。这两步要么一起完成，要么一起不完成，如果只完成第一步，第二步失败，钱会莫名其妙少了100元。</p><ol start="2"><li>C (Consistency) 一致性</li></ol><p>一致性也比较容易理解，也就是说数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束。<br> 例如现有完整性约束a+b=10，如果一个事务改变了a，那么必须得改变b，使得事务结束后依然满足a+b=10，否则事务失败。</p><ol start="3"><li>(Isolation) 独立性</li></ol><p>所谓的独立性是指并发的事务之间不会互相影响，如果一个事务要访问的数据正在被另外一个事务修改，只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响。</p><p>比如现在有个交易是从A账户转100元至B账户，在这个交易还未完成的情况下，如果此时B查询自己的账户，是看不到新增加的100元的。</p><ol start="4"><li>D (Durability) 持久性</li></ol><p>持久性是指一旦事务提交后，它所做的修改将会永久的保存在数据库上，即使出现宕机也不会丢失。</p><h3 id="_5-2-数据源配置" tabindex="-1"><a class="header-anchor" href="#_5-2-数据源配置" aria-hidden="true">#</a> 5.2 数据源配置</h3><p>数据源是应用程序连接到数据库的接口，它提供了与数据库进行连接、数据读写等操作的能力。在软件系统中，数据源通常是一个逻辑概念，它可以对应于一个数据库的实例、一个数据库集群或者一个数据文件等。数据源包含了连接到数据库所需的属性和配置信息，例如数据库的地址、用户名、密码、连接池大小等。</p><p>在Java应用程序中，数据源通常由JDBC驱动程序提供。Java应用程序通过JDBC API来连接到数据源，并执行SQL语句来读写数据。在Java EE应用程序中，也可以使用**Java Persistence API **（JPA）来操作数据库，JPA也提供了类似于JDBC的接口来连接到数据源。</p><p>在Spring框架中，数据源是通过DataSource接口来实现的。Spring中提供了多个数据源的实现，例如基于Apache Commons DBCP的BasicDataSource、基于Tomcat JDBC Pool的TomcatDataSource等。Spring Boot中默认使用<strong>HikariCP</strong>作为数据源，<strong>HikariCP</strong>是一个高性能的JDBC连接池。</p><p>数据源是应用程序中与数据库交互的核心组件之一，它的性能和稳定性对应用程序的性能和稳定性有很大的影响。因此，在开发应用程序时，需要根据实际情况选择合适的数据源，并进行适当的配置和优化。</p><ul><li><p>Hikari</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>h2<span class="token punctuation">:</span>~/test
    <span class="token key atrule">hikari</span><span class="token punctuation">:</span>
      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> org.h2.Driver
      <span class="token key atrule">username</span><span class="token punctuation">:</span> sa
      <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Druid</p></li></ul><h3 id="_5-3-持久化技术" tabindex="-1"><a class="header-anchor" href="#_5-3-持久化技术" aria-hidden="true">#</a> 5.3 持久化技术</h3><p>持久化技术是指将数据保存到持久化存储介质中，以便在应用程序退出后仍然可以保持数据的完整性和可用性。在Java应用程序中，常见的持久化技术有以下几种：</p><p>1. JDBC：JDBC是Java数据库连接API的缩写，它是Java应用程序中与关系型数据库交互的标准API。通过JDBC，应用程序可以使用SQL语句来操作数据库，例如查询、插入、更新和删除数据。<br> 2. JPA：JPA是Java Persistence API的缩写，它是一种ORM（对象关系映射）框架，可以将Java对象映射到关系型数据库中的表格中。JPA提供了一套标准的API，可以在不同的ORM框架之间进行切换，例如Hibernate、EclipseLink等。<br> 3. <strong>Hibernate</strong>：Hibernate是一种流行的ORM框架，它可以将Java对象映射到关系型数据库中的表格中。Hibernate提供了丰富的查询语言和缓存机制，可以有效地提高应用程序的性能。<br> 4. <strong>MyBatis</strong>：MyBatis是一种基于XML的持久化框架，它可以将SQL语句映射到Java方法中，并提供了丰富的查询语言和缓存机制。MyBatis与Hibernate相比，更加灵活和轻量级。<br> 5. <strong>Spring Data</strong>：Spring Data是一个为Java应用程序提供数据访问技术的框架，它支持多种持久化技术，包括JPA、Hibernate、MyBatis等。Spring Data提供了一套简洁的API，可以方便地进行数据访问和操作。<br> 6. <strong>Mybatis-plus</strong>：Mybatis的升级版，内置了许多CURD方法，在数据层和业务层都极大程度简化了开发。</p><h4 id="_5-3-1-springboot内置持久化解决方案" tabindex="-1"><a class="header-anchor" href="#_5-3-1-springboot内置持久化解决方案" aria-hidden="true">#</a> 5.3.1 SpringBoot内置持久化解决方案</h4><p>SpringBoot内置了多种持久化解决方案，可以轻松地进行数据库操作。</p><p>1. Spring Data JPA：Spring Boot内置了Spring Data JPA，它是Spring Data项目的一部分，是一个ORM框架，可以将Java对象映射到关系型数据库中的表格中。它支持多种数据库，包括MySQL、PostgreSQL、Oracle等。<br> 2. Spring Data JDBC：Spring Boot还内置了Spring Data JDBC，它是一种基于JDBC的持久化框架，可以直接操作SQL语句。相比于ORM框架，Spring Data JDBC更加轻量级，适用于简单的数据访问场景。<br> 3. Spring Data MongoDB：如果你需要使用文档型数据库，那么Spring Boot内置了Spring Data MongoDB。它是Spring Data项目的一部分，可以将Java对象映射到MongoDB中的集合中。<br> 4. Spring Data Redis：Spring Boot内置了Spring Data Redis，它是Spring Data项目的一部分，可以访问Redis数据库。<br> 5. JDBC Template：如果你需要使用JDBC进行数据访问，Spring Boot内置了JDBC Template，它是一个简单而强大的JDBC操作模板。</p><h4 id="_5-3-2-内嵌数据库" tabindex="-1"><a class="header-anchor" href="#_5-3-2-内嵌数据库" aria-hidden="true">#</a> 5.3.2 内嵌数据库</h4><p>Spring Boot内置了三种内嵌数据库：</p><p>1. H2 Database：H2 Database是一种基于Java编写的轻量级关系型数据库，可以作为内置数据库使用。它不需要安装，只需要在项目中添加相应的依赖，就可以轻松地进行数据访问和操作。H2 Database支持SQL语法和JDBC API，可以很好地与Spring Boot集成。<br> 2. Apache Derby：Apache Derby是一种基于Java编写的轻量级关系型数据库，也可以作为内置数据库使用。它与H2 Database类似，不需要安装，只需要在项目中添加相应的依赖，就可以轻松地进行数据访问和操作。Apache Derby支持SQL语法和JDBC API，可以很好地与Spring Boot集成。<br> 3. HSQLDB：HSQLDB也是Spring Boot内置的一种内嵌式数据库。HSQLDB是一种基于Java的关系型数据库，支持SQL语法和JDBC API，并且具有高性能和可靠性。在Spring Boot应用程序中，默认情况下会自动配置HSQLDB作为内置数据库，以便在开发和测试阶段使用。但是在生产环境中，通常需要使用更加稳定和可靠的外部数据库，如MySQL、PostgreSQL等。</p><p>内置数据库适用于一些简单的应用程序或演示项目，如果需要更高的性能或更复杂的数据操作，建议使用外部数据库，如MySQL、PostgreSQL等。在实际开发中，选择合适的数据库要考虑到应用程序的实际情况，如数据容量、并发性、安全性等方面，以达到更好的性能和可靠性。</p><h3 id="_5-4-cap定理-cap-theorem" tabindex="-1"><a class="header-anchor" href="#_5-4-cap定理-cap-theorem" aria-hidden="true">#</a> 5.4 CAP定理（CAP theorem）</h3><p>在计算机科学中, CAP定理（CAP theorem）, 又被称作 布鲁尔定理（Brewer&#39;s theorem）, 它指出对于一个分布式计算系统来说，不可能同时满足以下三点:</p><ul><li><p>一致性(Consistency) (所有节点在同一时间具有相同的数据)</p></li><li><p>可用性(Availability) (保证每个请求不管成功或者失败都有响应)</p></li><li><p>分区容错性(Partition tolerance) (系统中任意信息的丢失或失败不会影响系统的继续运作)</p></li></ul><p>CAP理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，最多只能同时较好的满足两个。</p><p>因此，根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三 大类：</p><ul><li>CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。</li><li>CP - 满足一致性，分区容忍性的系统，通常性能不是特别高。</li><li>AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。</li></ul><h3 id="_5-5-redis持久化" tabindex="-1"><a class="header-anchor" href="#_5-5-redis持久化" aria-hidden="true">#</a> 5.5 Redis持久化</h3><p>在Redis中通过配置实现持久化是比较简单的，下面将以Spring Boot项目使用Redis作为数据存储的实现方式为例，演示如何在项目中实现Redis的持久化。</p><ol><li>首先需要在pom.xml文件中添加以下依赖：</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>然后在application.yml或者application.properties文件中进行Redis的配置，下面是一个示例：</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  redis<span class="token punctuation">:</span>
    host<span class="token punctuation">:</span> localhost
    port<span class="token punctuation">:</span> <span class="token number">6379</span>
    password<span class="token punctuation">:</span> <span class="token null important">null</span>
    database<span class="token punctuation">:</span> <span class="token number">0</span>
    jedis<span class="token punctuation">:</span>
      pool<span class="token punctuation">:</span>
        max<span class="token punctuation">-</span><span class="token key atrule">active</span><span class="token punctuation">:</span> <span class="token number">8</span>
        max<span class="token punctuation">-</span><span class="token key atrule">wait</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>1ms
        max<span class="token punctuation">-</span><span class="token key atrule">idle</span><span class="token punctuation">:</span> <span class="token number">8</span>
        min<span class="token punctuation">-</span><span class="token key atrule">idle</span><span class="token punctuation">:</span> <span class="token number">0</span>
    timeout<span class="token punctuation">:</span> 10000ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们配置了Redis的地址、端口、密码和数据库编号等信息，并设置了连接池的一些参数和超时时间。</p><p>#### 5.5.1 配置Redis持久化方式</p><p>Redis提供了两种持久化方式：RDB和AOF。在Spring Boot中，可以通过以下几种方式来配置Redis的持久化方式：</p><p>1. 在application.yml或者application.properties文件中进行设置，示例如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  redis<span class="token punctuation">:</span>
    <span class="token punctuation">...</span>
    <span class="token comment"># 开启RDB持久化方式</span>
    redisson<span class="token punctuation">:</span>
      config<span class="token punctuation">:</span>
        codec<span class="token punctuation">:</span> org.redisson.codec.JsonJacksonCodec
        useSingleServer<span class="token punctuation">:</span> <span class="token boolean important">true</span>
        singleServerConfig<span class="token punctuation">:</span>
          address<span class="token punctuation">:</span> <span class="token string">&quot;redis://127.0.0.1:6379&quot;</span>
    <span class="token comment"># 开启AOF持久化方式</span>
    lettuce<span class="token punctuation">:</span>
      pool<span class="token punctuation">:</span>
        max<span class="token punctuation">-</span><span class="token key atrule">active</span><span class="token punctuation">:</span> <span class="token number">8</span>
        max<span class="token punctuation">-</span><span class="token key atrule">idle</span><span class="token punctuation">:</span> <span class="token number">8</span>
        min<span class="token punctuation">-</span><span class="token key atrule">idle</span><span class="token punctuation">:</span> <span class="token number">0</span>
      client<span class="token punctuation">:</span>
        resources<span class="token punctuation">:</span>
          readFrom<span class="token punctuation">:</span> REPLICA_PREFERRED
          timeout<span class="token punctuation">:</span> 10000ms
        shutdown<span class="token punctuation">-</span><span class="token key atrule">timeout</span><span class="token punctuation">:</span> 100ms
      redis<span class="token punctuation">:</span>
        database<span class="token punctuation">:</span> <span class="token number">0</span>
        host<span class="token punctuation">:</span> localhost
        port<span class="token punctuation">:</span> <span class="token number">6379</span>
        password<span class="token punctuation">:</span> <span class="token null important">null</span>
        jedis<span class="token punctuation">:</span>
          pool<span class="token punctuation">:</span>
            max<span class="token punctuation">-</span><span class="token key atrule">active</span><span class="token punctuation">:</span> <span class="token number">8</span>
            max<span class="token punctuation">-</span><span class="token key atrule">wait</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>1ms
            max<span class="token punctuation">-</span><span class="token key atrule">idle</span><span class="token punctuation">:</span> <span class="token number">8</span>
            min<span class="token punctuation">-</span><span class="token key atrule">idle</span><span class="token punctuation">:</span> <span class="token number">0</span>
        timeout<span class="token punctuation">:</span> 10000ms
        lettuce<span class="token punctuation">:</span>
          pool<span class="token punctuation">:</span>
            enabled<span class="token punctuation">:</span> <span class="token boolean important">true</span>
            max<span class="token punctuation">-</span><span class="token key atrule">active</span><span class="token punctuation">:</span> <span class="token number">8</span>
            max<span class="token punctuation">-</span><span class="token key atrule">idle</span><span class="token punctuation">:</span> <span class="token number">8</span>
            min<span class="token punctuation">-</span><span class="token key atrule">idle</span><span class="token punctuation">:</span> <span class="token number">0</span>
          cluster<span class="token punctuation">:</span>
            refresh<span class="token punctuation">:</span>
              adaptive<span class="token punctuation">:</span> <span class="token boolean important">true</span>
              adaptive<span class="token punctuation">-</span><span class="token key atrule">multiplier</span><span class="token punctuation">:</span> <span class="token number">2</span>
              refresh<span class="token punctuation">-</span><span class="token key atrule">period</span><span class="token punctuation">:</span> 5s
              update<span class="token punctuation">-</span><span class="token key atrule">interval</span><span class="token punctuation">:</span> 100ms
              validate<span class="token punctuation">-</span><span class="token key atrule">cluster-node-status</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们在配置文件中使用了Spring Boot官方提供的Lettuce和Redisson客户端，同时开启了RDB和AOF两种持久化方式，并设置了一些其他的参数，如编解码方式、连接池大小等。</p><p>2. 通过Java配置类的方式实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableCaching</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token keyword">extends</span> <span class="token class-name">CachingConfigurerSupport</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> template<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">CacheManager</span> <span class="token function">cacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RedisCacheConfiguration</span> config <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">RedisCacheManager</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">cacheDefaults</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RedissonClient</span> <span class="token function">redissonClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">&quot;redis://127.0.0.1:6379&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们通过Java配置类的方式来配置RedisTemplate和RedisCacheManager以及RedissonClient，同时设置了key和value的序列化方式为String和JSON格式。这种方式相对于在配置文件中进行配置，更加灵活，可以根据实际业务需求来进行定制。</p><h2 id="_6-整合第三方技术" tabindex="-1"><a class="header-anchor" href="#_6-整合第三方技术" aria-hidden="true">#</a> 6. 整合第三方技术</h2><h3 id="_6-1-缓存" tabindex="-1"><a class="header-anchor" href="#_6-1-缓存" aria-hidden="true">#</a> 6.1 缓存</h3><p>SpringBoot内置了多种缓存解决方案，可以轻松地实现缓存功能。</p><p>1. Spring Cache：Spring Cache是Spring框架中的缓存抽象层，可以集成多种缓存技术，如EhCache、Redis、Guava等。在Spring Boot应用程序中，可以使用Spring Cache来进行缓存的数据访问和操作。Spring Cache提供了简单的注解，如@Cacheable、@CachePut、@CacheEvict等，可以方便地实现缓存功能。<br> 2. Caffeine：Caffeine是一种基于Java的高性能缓存库，可以作为Spring Boot的缓存解决方案使用。它具有高速缓存、高并发、时间过期、大小限制等特性，可以应用于各种场景。在Spring Boot应用程序中，可以使用Caffeine来进行缓存的数据访问和操作。<br> 3. EhCache：EhCache是一种基于Java的开源缓存库，也可以作为Spring Boot的缓存解决方案使用。它具有高速缓存、高并发、时间过期、大小限制等特性，可以应用于各种场景。在Spring Boot应用程序中，可以使用EhCache来进行缓存的数据访问和操作。<br> 4. Redis：<br> 5. memcached<br> 6. jetcache<br> 7. j2cache</p><h4 id="_6-1-2缓存与持久化" tabindex="-1"><a class="header-anchor" href="#_6-1-2缓存与持久化" aria-hidden="true">#</a> 6.1.2缓存与持久化</h4><p>缓存：即临时或短时间存储，非持久化存储。将数据存放与内存或高速存储器。与之相反的概念是持久化存储，存放与硬盘，可长时间保存，MySQL的数据存储。</p><p>缓存</p><ul><li>优点：缓存，存放在内存，所以访问和更改等操作速度极快，</li><li>缺点：不能长时间存储，服务器关闭即销毁</li></ul><p>持久化：</p><ul><li>优点：可以长时间存储</li><li>缺点：在需要对数据频繁执行操作时性能会很差，因为每次都需要访问数据库。</li></ul><p>将需要频繁访问且变更不频繁的数据放于缓存，这里主要是访问，因为在执行更改频繁的操作时为确保数据同步还是得直接操作数据库。对于更改不频繁的操作放于数据库和缓存都可以。</p><h3 id="_6-2-数据淘汰策略" tabindex="-1"><a class="header-anchor" href="#_6-2-数据淘汰策略" aria-hidden="true">#</a> 6.2 数据淘汰策略</h3><p>常见注解</p><p>在Spring Boot框架中，缓存是一项常用的技术，可将一些经常查询且数据变更不频繁的数据保存到内存或其他高速存储器中，以减少数据库等数据源频繁访问的压力，提高系统性能。</p><p>Spring Boot框架自带了多种缓存实现，最常用的是基于注解的缓存，通过在方法上添加@Cacheable、@CachePut和@CacheEvict等注解来控制缓存的读取、更新和删除操作。具体来说，这些注解的作用如下：</p><p>1. @Cacheable：标记一个方法可以被缓存，当在执行该方法时，系统会先去缓存中查找是否有已经缓存过的结果，如果有，则直接返回前面缓存的结果，否则继续执行方法并将结果缓存起来。</p><p>2. @CachePut：更新缓存，即每次都执行该方法，并将返回值保存到缓存中。</p><p>3. @CacheEvict：清除缓存，即从缓存中清除指定的缓存项。</p><p>Spring Boot支持多种缓存管理器，包括Ehcache、Guava、Redis等，开发者可以根据自己的实际需求选择合适的缓存实现方式。</p><p>需要注意的是，使用缓存时需要考虑缓存的适用范围和缓存策略，对于经常更新的数据或者容易变化的数据，不适合使用缓存；对于需要保密的数据，也不宜使用缓存。同时，在使用缓存时要注意缓存过期策略、缓存分区、缓存清理等问题，以确保数据的准确性和及时性。</p><h3 id="_6-3-任务" tabindex="-1"><a class="header-anchor" href="#_6-3-任务" aria-hidden="true">#</a> 6.3 任务</h3><h4 id="_6-3-1-概括" tabindex="-1"><a class="header-anchor" href="#_6-3-1-概括" aria-hidden="true">#</a> 6.3.1 概括</h4><p>任务（Task）是指需要定期执行的某些操作，例如定时发送邮件、更新缓存、备份数据库等。Spring Boot框架提供了多种机制来实现任务调度，最常用的是基于注解的方式和集成第三方的定时任务框架。</p><p>在计算机编程中，任务（Task）通常可以分为以下几种类型：</p><p>1. 一次性任务：指只需要执行一次的任务，例如初始化数据、备份数据库等。</p><p>2. 周期性任务：指需要在固定时间间隔内重复执行的任务，例如定时更新缓存、定时发送邮件等。</p><p>3. 延迟任务：指需要在一定延迟后才能执行的任务，例如定时器等待一段时间后执行某个操作。</p><p>4. 异步任务：指需要异步处理的任务，例如异步调用第三方接口、异步下载文件等。</p><p>5. 并发任务：指需要并发执行的任务，例如多线程实现的任务。</p><p>任务多种多样，每种类型都有其自己的特点和应用场景。Spring Boot框架支持其中的一些任务类型，例如周期性任务通过集成Quartz或者使用@Scheduled注解实现，异步任务通过使用@Async注解实现，并发任务可以通过Java多线程等技术实现。开发者需要根据自身业务需求选择合适的任务类型以及相应的任务实现方式。定时任务属于一种周期性任务</p><h4 id="_6-3-2-实现" tabindex="-1"><a class="header-anchor" href="#_6-3-2-实现" aria-hidden="true">#</a> 6.3.2 实现</h4><p>1. 基于注解的方式</p><p>通过在方法上使用@Scheduled注解，可以定义该方法需要定期执行的时间间隔或执行时间点。例如，下面的代码可以使方法每5秒钟执行一次：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">taskMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行任务内容</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2. 集成第三方的定时任务框架</p><p>Spring Boot框架也支持集成一些第三方的定时任务框架，例如Quartz、JDK Timer等。通过配置相应的Bean，可以实现类似于上述@Scheduled注解的功能，同时还可以支持更丰富的任务调度需求，例如分布式任务调度、动态修改任务定时策略等。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">TimerTask</span> timerTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;this is a timerTask&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>timerTask<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-3-3-定时任务框架" tabindex="-1"><a class="header-anchor" href="#_6-3-3-定时任务框架" aria-hidden="true">#</a> 6.3.3 定时任务框架</h4><ul><li>Quartz</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-quartz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>spring task</li></ul><p>内置的，不需要导包</p><ul><li>开启定时任务功能</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableScheduling</span><span class="token comment">//开启定时任务功能</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootCacheApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringBootCacheApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span><span class="token comment">//定义成Bean</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTask</span> <span class="token punctuation">{</span>
    <span class="token comment">//具体定时任务</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;0/1 * * * * ?&quot;</span><span class="token punctuation">)</span><span class="token comment">//cron表达式</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;spring task is running&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-3-4-cron表达式" tabindex="-1"><a class="header-anchor" href="#_6-3-4-cron表达式" aria-hidden="true">#</a> 6.3.4 cron表达式</h4><p>Cron表达式是一种时间表达式，用于指定定时任务的执行时间。Cron表达式由6个字段组成，分别表示秒、分钟、小时、日期、月份和星期几。每个字段都有特定的取值范围和含义。Cron表达式的格式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>秒 分 时 日 月 星期
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>各个字段的取值范围如下：</p><p>1.秒（0-59）</p><p>2.分钟（0-59）</p><p>3.小时（0-23）</p><p>4.日期（1-31）</p><p>5.月份（1-12或JAN-DEC）</p><p>6.星期几（0-6或SUN-SAT，0表示周日）</p><p>Cron表达式还支持一些特殊字符，如*（表示任意值）、?（表示不指定）、-（表示范围）、/（表示间隔）、,（表示多个值）等。例如，下面是一些常见的Cron表达式示例：</p><p>1.每隔5秒钟执行一次：<code>*/5 * * * * *</code></p><p>2.每天23点执行一次：<code>0 0 23 * * ?</code></p><p>3.每周一、三、五的10点钟执行一次：<code>0 0 10 ? * MON,WED,FRI</code></p><p>4.每月最后一天的23点钟执行一次：<code>0 0 23 L * ?</code></p><p>在Spring Boot中，可以使用@Scheduled注释的cron属性来指定Cron表达式。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;0 0 23 * * ?&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//TODO: 执行任务</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将会在每天23点执行一次doSomething方法。</p><h3 id="_6-4-整合javamail" tabindex="-1"><a class="header-anchor" href="#_6-4-整合javamail" aria-hidden="true">#</a> 6.4 整合javamail</h3><h4 id="_6-4-1-相关协议" tabindex="-1"><a class="header-anchor" href="#_6-4-1-相关协议" aria-hidden="true">#</a> 6.4.1 相关协议</h4><ul><li><p>SMTP</p><ul><li>邮件传输协议</li></ul></li><li><p>POP3</p><ul><li>接受电子邮件标准协议</li></ul></li><li><p>IMAP</p><ul><li>互联网消息协议，代替POP3</li></ul></li></ul><h4 id="_6-4-2-使用" tabindex="-1"><a class="header-anchor" href="#_6-4-2-使用" aria-hidden="true">#</a> 6.4.2 使用</h4><ol><li>导包</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>配置</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">mail</span><span class="token punctuation">:</span>
  <span class="token key atrule">username</span><span class="token punctuation">:</span> zhaoxi7109@qq.com
  <span class="token key atrule">password</span><span class="token punctuation">:</span> kaxkznmacmnqddif
  <span class="token key atrule">host</span><span class="token punctuation">:</span> smtp.qq.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>密码获取</li></ol><p>密码不是QQ邮箱密码，而是要到QQ邮箱中开启IMAP服务，然后获取密码</p><h3 id="_6-5-消息" tabindex="-1"><a class="header-anchor" href="#_6-5-消息" aria-hidden="true">#</a> 6.5 消息</h3><h4 id="_6-5-1-概念" tabindex="-1"><a class="header-anchor" href="#_6-5-1-概念" aria-hidden="true">#</a> 6.5.1 概念</h4><p>在Spring Boot中，消息（Message）是指作为数据传输载体的一段信息，可以是文本、二进制数据或者一些结构化数据。消息通常被用于异步通信场景，例如消息队列、发布-订阅等模式中。</p><p>Spring Boot提供了多个框架和技术来支持消息传输，包括JMS（Java Message Service）、AMQP（Advanced Message Queuing Protocol）、WebSocket等。其中，Spring Boot内置了一个轻量级的消息代理Broker——Spring AMQP，可以方便地实现基于AMQP协议的消息传输。</p><p>在使用Spring Boot中的消息传输组件时，需要定义消息的生产者和消费者。生产者负责创建消息并将其发送到消息队列或主题中，而消费者则从队列或主题中接收并处理消息。在Spring Boot中，我们可以使用@RabbitListener注解定义一个消息监听器，来监听并消费指定的队列或主题中的消息。</p><p>消息是指在应用程序之间传递的数据，通常用于实现异步通信、解耦合和缓冲等功能。在Spring Boot中，可以使用消息队列来实现消息传递。Spring Boot提供了多个消息队列实现，如ActiveMQ、RabbitMQ、Kafka等。其中，RabbitMQ是最常用的消息队列之一，它提供了丰富的功能和易于使用的API，可以快速地构建强大的消息系统。</p><h4 id="_6-5-2-robbitmq使用" tabindex="-1"><a class="header-anchor" href="#_6-5-2-robbitmq使用" aria-hidden="true">#</a> 6.5.2 RobbitMQ使用</h4><p>在Spring Boot中使用RabbitMQ实现消息传递，需要进行以下步骤：</p><p>1.添加依赖：在pom.xml文件中添加spring-boot-starter-amqp依赖。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.配置连接信息：在application.properties文件中配置RabbitMQ连接信息。</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.rabbitmq.host</span><span class="token punctuation">=</span><span class="token value attr-value">localhost</span>
<span class="token key attr-name">spring.rabbitmq.port</span><span class="token punctuation">=</span><span class="token value attr-value">5672</span>
<span class="token key attr-name">spring.rabbitmq.username</span><span class="token punctuation">=</span><span class="token value attr-value">guest</span>
<span class="token key attr-name">spring.rabbitmq.password</span><span class="token punctuation">=</span><span class="token value attr-value">guest</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.创建消息发送者：使用@Autowired注释注入AmqpTemplate对象，并使用它发送消息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">AmqpTemplate</span> rabbitTemplate<span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;exchangeName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;routingKey&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.创建消息接收者：使用@RabbitListener注释注入消息接收者，并处理接收到的消息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;queueName&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//TODO: 处理接收到的消息</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在以上步骤中，exchangeName和routingKey是RabbitMQ中的概念，用于将消息发送到指定的队列。队列是RabbitMQ中的基本单元，用于存储和传递消息。在使用RabbitMQ时，需要定义exchange和queue，并将它们绑定在一起，以便于消息的传递和处理。<br> 使用消息队列可以使应用程序实现高效的异步通信、解耦合和缓冲等功能，从而提高应用程序的性能和可靠性。</p><p>以下是一个使用Spring Boot和RabbitMQ实现基于AMQP协议的消息传输的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义一个消息监听器，并通过@RabbitListener注解指定监听的队列名</span>
<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;myqueue&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理接收到的消息</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Received message: &quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建一个消息生产者，并使用RabbitTemplate发送消息到指定的交换机和队列</span>
<span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;myexchange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;myroutingkey&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码中，我们创建了一个名为&quot;myqueue&quot;的队列，并定义了一个使用@RabbitListener注解的消息监听器，用来监听该队列收到的消息。此外，我们还创建了一个使用RabbitTemplate发送消息到队列中的生产者。通过调用RabbitTemplate的convertAndSend方法，可以将消息发送到指定的交换机和队列中。</p><p>需要注意的是，在使用Spring Boot和消息传输组件时，需要配置相关组件的参数和地址，并且需要注意消息的序列化和反序列化方式以及消息过期时间等问题。</p><ul><li><p>JMS</p><ul><li><p>Java message service</p></li><li><p>一种规范，类似jdbc</p></li><li><p>消息模型</p><ul><li>点对点模型</li><li>发布订阅模型</li></ul></li></ul></li><li><p>AMQP</p><ul><li><p>一种协议</p><ul><li>规范了网络交换的数据格式</li></ul></li><li><p>高级消息队列协议</p></li><li><p>消息模型</p><ul><li>direct exchange</li><li>fanout exchange</li><li>topic exchange</li><li>headers exchange</li><li>system exchange</li></ul></li><li><p>消息种类</p><ul><li>byte[]</li></ul></li></ul></li><li><p>MQTT</p></li></ul><h3 id="_6-5-3-activemq" tabindex="-1"><a class="header-anchor" href="#_6-5-3-activemq" aria-hidden="true">#</a> 6.5.3 ActiveMQ</h3><ol><li>导包</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-activemq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span> 2.7.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>配置</li></ol><h3 id="_6-6-监控" tabindex="-1"><a class="header-anchor" href="#_6-6-监控" aria-hidden="true">#</a> 6.6 监控</h3><p>在Spring Boot中，可以使用Actuator来实现应用程序的监控和管理。Actuator是Spring Boot的一个子项目，提供了很多有用的端点（Endpoints），可以用来监控和管理应用程序。Actuator中的端点包括健康检查、应用程序信息、系统信息、环境变量、配置属性、日志信息等。可以使用HTTP请求或JMX访问这些端点，并查看或修改应用程序的状态和配置信息。</p><p>例如，可以通过访问<code>/actuator/health</code>端点来获取应用程序的健康状态：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
    &quot;status&quot;: &quot;UP&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以通过访问<code>/actuator/info</code>端点来获取应用程序的信息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{
    &quot;app&quot;: {
        &quot;name&quot;: &quot;myapp&quot;,
        &quot;version&quot;: &quot;1.0.0&quot;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在默认情况下，Actuator的端点是开放的，可以通过HTTP请求或JMX访问。如果需要保护端点，可以通过配置Spring Security来实现。例如，在application.properties文件中添加以下配置：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>spring.security.user.name=admin
spring.security.user.password=admin
management.endpoints.web.exposure.include=health,info
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将会在保护的情况下开放health和info端点，并使用admin/admin作为用户名和密码进行访问。<br> Actuator还提供了很多其他的端点，可以根据需要进行配置和使用。使用Actuator可以快速地实现应用程序的监控和管理，从而提高应用程序的可靠性和可维护性。</p><ul><li>监控的意义</li><li>可视化监控平台</li><li>监控原理</li><li>自定义监控指标</li></ul><h3 id="_6-7-技术选型" tabindex="-1"><a class="header-anchor" href="#_6-7-技术选型" aria-hidden="true">#</a> 6.7 技术选型</h3><p>技术选型是指在开发项目时选择使用哪些技术和框架的过程。在选择技术和框架时，需要考虑多个因素，如项目需求、开发团队技术水平、可维护性、性能、安全性等。在选择技术和框架时，需要权衡这些因素，选择最适合项目的技术和框架。<br> 以下是一些可能用于Spring Boot项目的技术和框架：</p><p>1. 数据库：Spring Boot支持多种数据库，如MySQL、PostgreSQL、Oracle、MongoDB等。选择数据库时需要考虑数据量、数据结构、事务性能、高可用性等因素。<br> 2. 框架：Spring Boot是一个轻量级的框架，可以集成多种其他框架，如Spring Cloud、MyBatis、Hibernate、<strong>Thymeleaf</strong>、<strong>Freemarker</strong>等。选择框架时需要考虑框架的成熟度、功能特性、易用性等因素。<br> 3. 缓存：Spring Boot支持多种缓存技术，如Redis、Ehcache、Caffeine等。选择缓存技术时需要考虑缓存的数据类型、缓存的大小、缓存的过期策略等因素。<br> 4. 消息队列：Spring Boot支持多种消息队列技术，如ActiveMQ、RabbitMQ、Kafka等。选择消息队列时需要考虑消息的类型、消息的大小、消息的可靠性等因素。<br> 5. 安全性：Spring Boot提供了多种安全技术，如Spring Security、OAuth2等。选择安全技术时需要考虑安全级别、认证方式、授权策略等因素。<br> 6. 日志：Spring Boot支持多种日志框架，如Logback、Log4j2、Java Util Logging等。选择日志框架时需要考虑日志的输出方式、日志的性能、日志的可读性等因素。<br> 7. 测试：Spring Boot支持多种测试框架，如JUnit、Mockito、Hamcrest等。选择测试框架时需要考虑测试的类型、测试的覆盖率、测试的易用性等因素。</p><h2 id="_7-idea快捷键" tabindex="-1"><a class="header-anchor" href="#_7-idea快捷键" aria-hidden="true">#</a> 7. idea快捷键</h2><p>以下是在IntelliJ IDEA中常用的快捷键列表：</p><p>1. 基本编辑</p><p>- Ctrl + C / Ctrl + X / Ctrl + V：复制、剪切、粘贴<br> - Ctrl + Z / Ctrl + Shift + Z：撤销、重做<br> - Ctrl + F / Ctrl + R：查找、替换<br> - Ctrl + D：复制当前行或选定的区域<br> - Ctrl + Y：删除当前行或选定的区域<br> - Ctrl + N：查找类<br> - Ctrl + Shift + N：查找文件<br> - Ctrl + Alt + L：格式化代码<br> - Ctrl + Alt + O：优化导入的包</p><p>2. 代码编辑</p><p>- Ctrl + Space：自动完成代码<br> - Ctrl + Shift + Enter：自动补全语句<br> - Alt + Enter：快速修复代码问题<br> - Ctrl + P：显示方法参数<br> - Ctrl + Shift + I：显示方法定义<br> - Ctrl + B：跳转到定义处<br> - Ctrl + U：跳转到父类方法<br> - Ctrl + Alt + B：跳转到实现处</p><p>3. 导航</p><p>- Ctrl + E：显示最近打开的文件列表<br> - Ctrl + Shift + E：显示最近修改的文件列表<br> - Ctrl + G：跳转到指定行<br> - Ctrl + Shift + F：在项目中查找文本<br> - Ctrl + Shift + G：在项目中查找引用</p><p>4. 运行和调试</p><p>- Shift + F10：运行当前程序<br> - Shift + F9：调试当前程序<br> - Ctrl + Shift + F10：重新运行上次运行的程序<br> - Ctrl + F2：停止程序运行<br> - F7：进入方法内部<br> - Shift + F8：跳出方法<br> - F9：恢复程序运行<br> - Alt + F9：运行到光标处</p><p>5. Git集成</p><p>- Ctrl + K：提交代码<br> - Ctrl + Shift + K：推送代码<br> - Ctrl + Alt + Z：回退到上一个版本<br> - Ctrl + Alt + Shift + Z：回退到指定版本<br> - Ctrl + D：显示文件差异<br> - Ctrl + Shift + A：查找Git命令</p><p>6. 其他</p><p>- Ctrl + Q：显示文档注释<br> - Ctrl + Shift + U：切换大小写<br> - Ctrl + Shift + J：合并选定的行<br> - Ctrl + Shift + T：生成测试代码<br> - Ctrl + Alt + T：生成代码块<br> - Alt  +  F1：显示当前文件在项目视图中的位置<br> - Alt  +  Insert：生成代码<br> - Alt + shift+方向键 整行上下移动<br> - Ctrl + h 导出类相关 子类或接口<br> - Shift+ f6 重命名<br> - Alt + enter 显示上下文操作<br> - Shift+ shift 搜索<br> - Ctrl + shift+alt+/ 进入注册表</p><h2 id="_8-常用注解" tabindex="-1"><a class="header-anchor" href="#_8-常用注解" aria-hidden="true">#</a> 8. 常用注解</h2><h3 id="_8-1spring常用注解" tabindex="-1"><a class="header-anchor" href="#_8-1spring常用注解" aria-hidden="true">#</a> 8.1Spring常用注解</h3><ol><li>@Component注解<br> @Component是Spring中最基本的注解之一，用于标注一个类为Spring组件。其常用属性如下：</li></ol><ul><li>value：指定组件的名称，如果不指定则默认为类名首字母小写。</li></ul><ol start="2"><li>@Autowired注解<br> @Autowired用于自动装配Spring组件，可以用于依赖注入（DI）和控制反转（IOC）。其常用属性如下：</li></ol><ul><li>required：指定是否必须存在该组件，默认为true，表示必须存在，如果不存在则会抛出异常。</li></ul><ol start="3"><li>@Controller注解<br> @Controller用于标注一个类为Spring MVC控制器，用于处理HTTP请求和响应。其常用属性如下：</li></ol><ul><li>value：指定控制器的名称，如果不指定则默认为类名首字母小写。</li></ul><ol start="4"><li>@Service注解<br> @Service用于标注一个类为Spring服务组件，通常用于业务逻辑处理。其常用属性如下：</li></ol><ul><li>value：指定服务的名称，如果不指定则默认为类名首字母小写。</li></ul><ol start="5"><li>@Repository注解<br> @Repository用于标注一个类为Spring数据访问组件，通常用于访问数据库或其它数据源。其常用属性如下：</li></ol><ul><li>value：指定数据访问组件的名称，如果不指定则默认为类名首字母小写。</li></ul><ol start="6"><li>@RequestMapping注解<br> @RequestMapping用于映射HTTP请求到控制器方法，可以指定请求路径、请求方法、请求参数等。其常用属性如下：</li></ol><ul><li>value：指定请求路径，可以包含占位符和Ant风格的通配符。</li><li>method：指定请求方法，支持GET、POST、PUT、DELETE等HTTP方法。</li><li>params：指定请求参数，支持简单的表达式语言。</li><li>headers：指定请求头部，支持简单的表达式语言。</li></ul><ol start="7"><li>@PathVariable注解<br> @PathVariable用于获取URL路径变量的值，通常用于RESTful风格的API开发。其常用属性如下：</li></ol><ul><li>value：指定路径变量的名称，可以包含占位符和Ant风格的通配符。</li></ul><ol start="8"><li>@RequestParam注解<br> @RequestParam用于获取HTTP请求参数的值，可以指定参数名称、是否必需、默认值等。其常用属性如下：</li></ol><ul><li>value：指定请求参数的名称，可以包含占位符和Ant风格的通配符。</li><li>required：指定是否必须存在该参数，默认为true，表示必须存在，如果不存在则会抛出异常。</li><li>defaultValue：指定参数的默认值，如果请求中不存在该参数则使用默认值。</li></ul><ol start="9"><li>@ResponseBody注解<br> @ResponseBody用于将方法返回值转换为HTTP响应内容，通常用于返回JSON、XML等格式的数据。其常用属性如下：</li></ol><ul><li>不包含任何属性。</li></ul><ol start="10"><li>@Transactional注解<br> @Transactional用于标注一个方法为事务性操作，通常用于数据库操作或其它需要保证数据一致性的操作。其常用属性如下：</li></ol><ul><li>value：指定事务管理器的名称，可以使用多个事务管理器。</li></ul><h3 id="_8-2-springmvc常用注解" tabindex="-1"><a class="header-anchor" href="#_8-2-springmvc常用注解" aria-hidden="true">#</a> 8.2 SpringMVC常用注解</h3><p>SpringMVC是基于Spring框架的Web开发框架，提供了许多注解来简化开发过程。以下是一些常用的SpringMVC注解及其属性介绍：</p><ol><li>@Controller注解</li></ol><p>@Controller用于标注一个类为SpringMVC控制器，用于处理HTTP请求和响应。其常用属性与Spring的@Controller注解相同。</p><ol start="2"><li>@RequestMapping注解</li></ol><p>@RequestMapping用于映射HTTP请求到控制器方法，可以指定请求路径、请求方法、请求参数等。其常用属性如下：</p><ul><li>value：指定请求路径，可以包含占位符和Ant风格的通配符。</li><li>method：指定请求方法，支持GET、POST、PUT、DELETE等HTTP方法。</li><li>params：指定请求参数，支持简单的表达式语言。</li><li>headers：指定请求头部，支持简单的表达式语言。</li></ul><ol start="3"><li>@PathVariable注解</li></ol><p>@PathVariable用于获取URL路径变量的值，通常用于RESTful风格的API开发。其常用属性如下：</p><ul><li>value：指定路径变量的名称，可以包含占位符和Ant风格的通配符。</li></ul><ol start="4"><li>@RequestParam注解</li></ol><p>@RequestParam用于获取HTTP请求参数的值，可以指定参数名称、是否必需、默认值等。其常用属性如下：</p><ul><li>value：指定请求参数的名称，可以包含占位符和Ant风格的通配符。</li><li>required：指定是否必须存在该参数，默认为true，表示必须存在，如果不存在则会抛出异常。</li><li>defaultValue：指定参数的默认值，如果请求中不存在该参数则使用默认值。</li></ul><ol start="5"><li>@ResponseBody注解</li></ol><p>@ResponseBody用于将方法返回值转换为HTTP响应内容，通常用于返回JSON、XML等格式的数据。其常用属性与Spring的@ResponseBody注解相同。</p><ol start="6"><li>@ModelAttribute注解</li></ol><p>@ModelAttribute用于将HTTP请求参数绑定到控制器方法的参数或返回值中，其常用属性如下：</p><ul><li>value：指定属性的名称，可以使用占位符和SpEL表达式。</li></ul><ol start="7"><li>@SessionAttributes注解</li></ol><p>@SessionAttributes用于将控制器方法的参数或返回值保存到HTTP Session中，其常用属性如下：</p><ul><li>value：指定要保存到Session中的属性名称列表，可以使用占位符和SpEL表达式。</li></ul><ol start="8"><li>@InitBinder注解</li></ol><p>@InitBinder用于初始化WebDataBinder，可以用于自定义数据绑定逻辑。其常用属性如下：</p><ul><li>value：指定要初始化的WebDataBinder的名称，可以使用占位符和SpEL表达式。</li></ul><h3 id="_8-3-springboot常用注解" tabindex="-1"><a class="header-anchor" href="#_8-3-springboot常用注解" aria-hidden="true">#</a> 8.3 SpringBoot常用注解</h3><ol><li>@SpringBootApplication注解<br> @SpringBootApplication是Spring Boot中最常用的注解之一，包含了@SpringBootConfiguration、@EnableAutoConfiguration和@ComponentScan三个注解的功能。其常用属性如下：</li></ol><ul><li>exclude：排除自动配置的类，可以用于禁用不需要的自动配置。</li></ul><ol start="2"><li><p>@RestController注解<br> @RestController是Spring Boot中用于标注一个类为RESTful风格的控制器的注解。其常用属性与Spring的@Controller注解相同。</p></li><li><p>@RequestMapping注解<br> @RequestMapping在Spring Boot中同样也是用于映射HTTP请求到控制器方法的注解，其常用属性与Spring的@RequestMapping注解相同。</p></li><li><p>@Autowired注解<br> @Autowired在Spring Boot中同样也是用于自动装配Spring组件的注解，其常用属性与Spring的@Autowired注解相同。</p></li><li><p>@Value注解<br> @Value用于将配置文件中的属性值注入到一个Java类中，其常用属性如下：</p></li></ol><ul><li>value：指定配置文件中的属性名称，可以使用占位符和SpEL表达式。</li></ul><ol start="6"><li>@ConfigurationProperties注解<br> @ConfigurationProperties用于将配置文件中的属性值注入到一个Java类中，其常用属性如下：</li></ol><ul><li>prefix：指定属性的前缀名称，用于指定要注入的属性。</li></ul><ol start="7"><li><p>@EnableConfigurationProperties注解<br> @EnableConfigurationProperties用于启用@ConfigurationProperties注解，使得@ConfigurationProperties注解生效。</p></li><li><p>@EnableAutoConfiguration注解<br> @EnableAutoConfiguration用于自动配置Spring Boot应用程序，其常用属性如下：</p></li></ol><ul><li>exclude：排除自动配置的类，可以用于禁用不需要的自动配置。</li></ul><ol start="9"><li>@Conditional注解<br> @Conditional用于根据条件来控制是否启用某个配置项，其常用属性如下：</li></ol><ul><li>value：指定一个条件类，符合条件则启用该配置项。</li></ul><h3 id="_8-4-springcloud常用注解" tabindex="-1"><a class="header-anchor" href="#_8-4-springcloud常用注解" aria-hidden="true">#</a> 8.4 SpringCloud常用注解</h3><ol><li>@EnableDiscoveryClient注解</li></ol><p>@EnableDiscoveryClient用于启用服务注册和发现功能，可以将服务注册到服务注册中心，并从服务注册中心获取服务列表。其常用属性如下：</p><ul><li>value：指定服务注册中心的名称，可以使用多个服务注册中心。</li></ul><ol start="2"><li>@FeignClient注解</li></ol><p>@FeignClient用于声明一个基于HTTP的RESTful客户端，可以使用该客户端调用远程服务。其常用属性如下：</p><ul><li>value：指定远程服务的名称，可以使用占位符和SpEL表达式。</li><li>fallback：指定远程服务调用失败时的降级处理类，必须实现当前注解指定的接口。</li></ul><ol start="3"><li>@HystrixCommand注解</li></ol><p>@HystrixCommand用于声明一个基于Hystrix的服务降级处理方法，可以在远程服务调用失败时执行该方法。其常用属性如下：</p><ul><li>fallbackMethod：指定服务降级处理方法的名称，必须在当前类中定义。</li></ul><ol start="4"><li>@EnableCircuitBreaker注解</li></ol><p>@EnableCircuitBreaker用于启用基于Hystrix的服务降级处理功能，可以在远程服务调用失败时执行降级处理逻辑。</p><ol start="5"><li>@LoadBalanced注解</li></ol><p>@LoadBalanced用于启用基于Ribbon的负载均衡功能，可以将请求分发到多个实例中。其常用属性与Spring的@Qualifier注解相同。</p><ol start="6"><li>@EnableZuulProxy注解</li></ol><p>@EnableZuulProxy用于启用基于Zuul的API网关功能，可以将多个微服务的API聚合到一个网关中。其常用属性如下：</p><ul><li>value：指定Zuul代理服务的路径，可以使用占位符和SpEL表达式。</li></ul><h2 id="_9-其他" tabindex="-1"><a class="header-anchor" href="#_9-其他" aria-hidden="true">#</a> 9. 其他</h2><h3 id="_9-1-数据库字符集" tabindex="-1"><a class="header-anchor" href="#_9-1-数据库字符集" aria-hidden="true">#</a> 9.1 数据库字符集</h3><p>在使用Navicat创建数据库时，对于字符集和排序规则的选择非常重要，因为它们会影响数据库的数据存储和查询结果。</p><ol><li>字符集决定了数据库中存储的字符集类型，包括文字、数字和符号等。通常情况下，建议选择utf8mb4字符集，因为它支持更广泛的语言和字符集，包括Emoji表情符号等。</li><li>排序规则决定了在查询结果中如何对数据进行排序，包括大小写敏感和非大小写敏感等。建议选择utf8mb4_general_ci排序规则，因为它是一种不区分大小写的排序规则，适用于大多数情况下的查询。</li></ol><h2 id="_10-lunix" tabindex="-1"><a class="header-anchor" href="#_10-lunix" aria-hidden="true">#</a> 10. Lunix</h2><h3 id="_10-1-linux概括" tabindex="-1"><a class="header-anchor" href="#_10-1-linux概括" aria-hidden="true">#</a> 10.1 Linux概括</h3><h3 id="_10-2-虚拟机vmware中的网络适配器" tabindex="-1"><a class="header-anchor" href="#_10-2-虚拟机vmware中的网络适配器" aria-hidden="true">#</a> 10.2 虚拟机VMWare中的网络适配器</h3><p>VMware是一种虚拟化软件，它允许用户在一台计算机上运行多个虚拟机，每个虚拟机都可以运行不同的操作系统和应用程序。在VMware中，每个虚拟机都有自己的网络适配器，用于连接虚拟机到主机或其他虚拟机的网络。</p>`,407),h={href:"https://docs.vmware.com/cn/VMware-Workstation-Pro/16.0/com.vmware.ws.using.doc/GUID-C82DCB68-2EFA-460A-A765-37225883337D.html",target:"_blank",rel:"noopener noreferrer"},y=e(`<h4 id="_10-2-1-桥接模式" tabindex="-1"><a class="header-anchor" href="#_10-2-1-桥接模式" aria-hidden="true">#</a> 10.2.1 桥接模式</h4><p><strong>Bridged Adapter</strong>（桥接适配器）：桥接适配器将虚拟机连接到主机（就是安装VMware的最基础的那台电脑，不是VMware中的操作系统）的物理网络，使虚拟机可以像主机一样与其他计算机通信。也就是主机连接的是哪个网络虚拟机就直接连接哪个网络，但是由于虚拟机内虚拟出来的Linux系统也可看做一台主机，所以虚拟机的网络地址由物理网络的DHCP服务器分配后会与主机不同。就相当于两台不同电脑连接同一网络会分配不同IP。</p><p>可以在对应Linux操作系统（VMware虚拟出来的）终端中使用指令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ifconfig
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中ens33中的inet 192.168.1.105就是该Linux的网络地址，拿到IP后就可以通过FinalShell进行远程连接。但是目前我只知道在对应Linux中获取IP，并不知道怎么通过主机直接获取，所以这种方式每次都要打开Linux。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
        inet 192.168.1.105  netmask 255.255.255.0  broadcast 192.168.1.255
        inet6 fe80::f8a2:735f:8772:d7e2  prefixlen 64  scopeid 0x20&lt;link&gt;
        ether 00:0c:29:4f:e4:21  txqueuelen 1000  (Ethernet)
        RX packets 224357  bytes 325285393 (310.2 MiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 73368  bytes 5235140 (4.9 MiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10-2-2-nat模式" tabindex="-1"><a class="header-anchor" href="#_10-2-2-nat模式" aria-hidden="true">#</a> 10.2.2 NAT模式</h4><p>NAT Adapter（网络地址转换适配器）：NAT适配器将虚拟机连接到主机的网络，但虚拟机的网络地址由VMware的NAT服务分配。该适配器通常用于在虚拟机中运行客户端应用程序，例如Web浏览器。</p><h4 id="_10-2-3-仅主机模式" tabindex="-1"><a class="header-anchor" href="#_10-2-3-仅主机模式" aria-hidden="true">#</a> 10.2.3 仅主机模式</h4><p>Host-only Adapter（主机专用适配器）：主机专用适配器将虚拟机连接到主机的虚拟网络中，但不会连接到主机的物理网络。这种适配器通常用于在虚拟机之间进行通信或在虚拟机和主机之间进行安全的本地通信。</p><h4 id="_10-2-4-自定义模式" tabindex="-1"><a class="header-anchor" href="#_10-2-4-自定义模式" aria-hidden="true">#</a> 10.2.4 自定义模式</h4><p>Custom Adapter（自定义适配器）：自定义适配器允许用户创建自己的虚拟网络配置。该适配器通常用于测试和开发目的。</p><p>用户可以根据需要选择不同类型的网络适配器来满足其网络需求。</p>`,13);function f(S,x){const a=l("ExternalLinkIcon");return i(),o("div",null,[u,n("ul",null,[n("li",null,[n("p",null,[s("官网创建："),n("a",r,[s("https://start.spring.io"),t(a)])])]),d,n("li",null,[n("p",null,[s("阿里云创建："),n("a",k,[s("https://start.aliyun.com/"),t(a)])])]),v]),m,n("p",null,[s("官网："),n("a",b,[s("https://baomidou.com/"),t(a)])]),g,n("p",null,[s("官方文档："),n("a",h,[s("配置虚拟网络适配器设置 (vmware.com)"),t(a)])]),y])}const q=p(c,[["render",f],["__file","springboot.html.vue"]]);export{q as default};
