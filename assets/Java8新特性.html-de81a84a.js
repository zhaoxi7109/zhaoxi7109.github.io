const e=JSON.parse('{"key":"v-2b78c687","path":"/codenotes/javacore/Java8%E6%96%B0%E7%89%B9%E6%80%A7.html","title":"Java8新特性","lang":"zh-CN","frontmatter":{"title":"Java8新特性","icon":"write","category":["Java"],"tag":["Java"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"Optional类 引入 NPE问题就是在开发中经常碰到的NullPointerException，即空指针问题，Optional类就是用来优雅解决该问题的方案。 比如大家可能都有这样的经历：调用一个方法得到了返回值却不能直接将返回值作为参数去调用别的方法。我们首先要判断这个返回值是否为null，只有在非空的前提下才能将其作为其他方法的参数。 以用户类和地址类举例说明其用法： public class User { private String userName; private String phoneNumber; private Address address; //无参、部分参数、全参数构造器方法... //setter、getter方法... }","head":[["meta",{"property":"og:url","content":"https://gitee.com/zhaoxi7109/codenotes/javacore/Java8%E6%96%B0%E7%89%B9%E6%80%A7.html"}],["meta",{"property":"og:site_name","content":"昭晞的小破站"}],["meta",{"property":"og:title","content":"Java8新特性"}],["meta",{"property":"og:description","content":"Optional类 引入 NPE问题就是在开发中经常碰到的NullPointerException，即空指针问题，Optional类就是用来优雅解决该问题的方案。 比如大家可能都有这样的经历：调用一个方法得到了返回值却不能直接将返回值作为参数去调用别的方法。我们首先要判断这个返回值是否为null，只有在非空的前提下才能将其作为其他方法的参数。 以用户类和地址类举例说明其用法： public class User { private String userName; private String phoneNumber; private Address address; //无参、部分参数、全参数构造器方法... //setter、getter方法... }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-20T05:42:02.000Z"}],["meta",{"property":"article:author","content":"zhaoxi"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2023-07-20T05:42:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java8新特性\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-20T05:42:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zhaoxi\\",\\"url\\":\\"https://gitee.com/zhaoxi7109\\"}]}"]]},"headers":[{"level":2,"title":"Optional类","slug":"optional类","link":"#optional类","children":[{"level":3,"title":"引入","slug":"引入","link":"#引入","children":[]},{"level":3,"title":"源码解读及各API的使用","slug":"源码解读及各api的使用","link":"#源码解读及各api的使用","children":[]},{"level":3,"title":"使用例子","slug":"使用例子","link":"#使用例子","children":[]},{"level":3,"title":"使用总结","slug":"使用总结","link":"#使用总结","children":[]}]}],"git":{"createdTime":1689831722000,"updatedTime":1689831722000,"contributors":[{"name":"zx","email":"2997605126@qq.com","commits":1}]},"readingTime":{"minutes":11.59,"words":3477},"filePathRelative":"codenotes/javacore/Java8新特性.md","localizedDate":"2023年7月20日","excerpt":"<h2> Optional类</h2>\\n<h3> 引入</h3>\\n<p><code>NPE</code>问题就是在开发中经常碰到的<code>NullPointerException</code>，即空指针问题，<code>Optional</code>类就是用来优雅解决该问题的方案。</p>\\n<p>比如大家可能都有这样的经历：调用一个方法得到了返回值却不能直接将返回值作为参数去调用别的方法。我们首先要判断这个返回值是否为<code>null</code>，只有在非空的前提下才能将其作为其他方法的参数。</p>\\n<p>以用户类和地址类举例说明其用法：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">User</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> userName<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">String</span> phoneNumber<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Address</span> address<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token comment\\">//无参、部分参数、全参数构造器方法...</span>\\n  <span class=\\"token comment\\">//setter、getter方法...</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
