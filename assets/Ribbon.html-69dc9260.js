import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,d as s}from"./app-9f31e196.js";const t={},i=s(`<h2 id="_2-负载均衡" tabindex="-1"><a class="header-anchor" href="#_2-负载均衡" aria-hidden="true">#</a> 2. 负载均衡</h2><p>负载均衡是将请求分散到多个节点上处理，以达到负载均衡和提高系统性能的目的。常见的负载均衡算法有<strong>轮询、权重轮询、最小连接数</strong>等，其中轮询算法是最简单的一种，即按照节点顺序依次分配请求。</p><p>SpringCloud底层其实是利用了一个名为<strong>Ribbon</strong>的组件，来实现负载均衡功能的</p><h3 id="_2-1-ribbon负载均衡" tabindex="-1"><a class="header-anchor" href="#_2-1-ribbon负载均衡" aria-hidden="true">#</a> 2.1 Ribbon负载均衡</h3><p>Ribbon是Netflix开源的一个基于HTTP和TCP的负载均衡器，主要用于在分布式系统中实现客户端负载均衡。Ribbon可以与<strong>Eureka</strong>、<strong>Consul</strong>等服务发现框架集成，实现动态的负载均衡和故障转移等功能。</p><p>使用Ribbon可以使客户端向多个服务器发送请求，并根据一定的策略选择一个可用的服务器进行负载均衡。Ribbon支持多种负载均衡算法，包括轮询、随机、加权轮询、加权随机等算法，还支持自定义负载均衡策略。</p><p>Ribbon还具有丰富的配置和管理功能，可以通过配置文件或代码进行灵活的配置和管理。Ribbon也提供了丰富的监控和调试功能，可以帮助开发人员快速定位和解决负载均衡问题。</p><h3 id="_2-2-负载均衡器" tabindex="-1"><a class="header-anchor" href="#_2-2-负载均衡器" aria-hidden="true">#</a> 2.2 负载均衡器</h3><p>常见的负载均衡器包括以下几种：</p><ol><li><p>硬件负载均衡器：硬件负载均衡器是一种专门的硬件设备，用于将服务请求分发到多个服务器上。硬件负载均衡器通常具有高性能和可靠性，可以实现多种负载均衡算法和路由策略。</p></li><li><p>软件负载均衡器：软件负载均衡器是一种运行在软件平台上的负载均衡器，通常使用反向代理技术实现。软件负载均衡器通常具有灵活的配置和管理方式，可以实现多种负载均衡算法和路由策略。</p></li><li><p>DNS负载均衡：DNS负载均衡是通过DNS服务器将服务请求分发到多个服务器上。通过将多个服务器的IP地址配置到DNS服务器上，并为其分配不同的权重值，DNS服务器可以根据权重值将请求分发到不同的服务器上。</p></li><li><p>会话复制：会话复制是将客户端的会话信息复制到多个服务器上，从而实现会话的共享和负载均衡。通过将客户端的请求分发到不同的服务器上，并复制其会话信息，可以实现会话的无缝切换和负载均衡。</p></li><li><p>LVS：LVS（Linux Virtual Server）是一种开源的负载均衡软件，可以实现TCP/UDP流量的负载均衡和高可用性。LVS通常运行在Linux系统上，可以通过多种负载均衡算法和路由策略实现负载均衡和故障转移等功能。</p></li><li><p>Nginx：Nginx是一种开源的高性能反向代理和负载均衡服务器，支持TCP/UDP和HTTP协议。Nginx具有灵活的配置和管理方式，可以实现多种负载均衡算法和路由策略，还支持高可用性和动态扩展等功能。</p></li></ol><h3 id="_2-3-负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_2-3-负载均衡策略" aria-hidden="true">#</a> 2.3 负载均衡策略</h3><p>负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类，具体参考SpringCloud官方</p><p>不同规则的含义如下：</p><table><thead><tr><th><strong>内置负载均衡规则类</strong></th><th><strong>规则描述</strong></th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略： （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。 （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。</td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td></tr><tr><td><strong>ZoneAvoidanceRule</strong></td><td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td></tr><tr><td>BestAvailableRule</td><td>忽略那些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器。</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑</td></tr></tbody></table><p>默认的实现就是ZoneAvoidanceRule，是一种轮询方案</p><h3 id="_2-4-自定义负载均衡策略" tabindex="-1"><a class="header-anchor" href="#_2-4-自定义负载均衡策略" aria-hidden="true">#</a> 2.4 自定义负载均衡策略</h3><p>通过定义IRule实现可以修改负载均衡规则，有两种方式：</p><ol><li>代码方式：在对应服务的启动类中定义一个新的IRule：</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">IRule</span> <span class="token function">randomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandomRule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>配置文件方式：在对应服务的application.yml文件中，添加新的配置也可以修改规则：</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">userservice</span><span class="token punctuation">:</span> <span class="token comment"># 给某个微服务配置负载均衡规则，这里是userservice服务</span>
  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
    <span class="token key atrule">NFLoadBalancerRuleClassName</span><span class="token punctuation">:</span> com.netflix.loadbalancer.RandomRule <span class="token comment"># 负载均衡规则 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般用默认的负载均衡规则，不做修改</p><h3 id="_2-5-饥饿加载" tabindex="-1"><a class="header-anchor" href="#_2-5-饥饿加载" aria-hidden="true">#</a> 2.5 饥饿加载</h3><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。</p><p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">ribbon</span><span class="token punctuation">:</span>
  <span class="token key atrule">eager-load</span><span class="token punctuation">:</span>
    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">clients</span><span class="token punctuation">:</span> userservice
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),l=[i];function o(r,d){return a(),e("div",null,l)}const u=n(t,[["render",o],["__file","Ribbon.html.vue"]]);export{u as default};
