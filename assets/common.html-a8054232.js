const e=JSON.parse('{"key":"v-b10e4ada","path":"/codenotes/springcloud/common.html","title":"常见概念","lang":"zh-CN","frontmatter":{"title":"常见概念","icon":"write","category":["SpringCloud"],"tag":["SpringCloud"],"sticky":false,"star":false,"article":true,"timeline":true,"description":"常见概念 5. 相关概念 5.1 分布式系统如何保证数据一致性 在分布式系统中，由于数据可能存储在不同的节点上，因此需要采取一些机制来保证数据的一致性。以下是一些常见的数据一致性机制： 两阶段提交（Two-phase Commit，2PC）：2PC是一种常见的分布式事务协议，它通过两个阶段的提交机制来保证多个节点之间的事务一致性。在第一阶段中，协调者节点向参与者节点发送提交请求，询问它们是否准备好提交事务。如果所有参与者节点都准备好了，那么在第二阶段中，协调者节点向所有参与者节点发送提交命令，完成事务提交操作。如果有任何一个参与者节点无法完成事务提交操作，那么整个事务将会回滚。 三阶段提交（Three-phase Commit，3PC）：3PC是2PC的改进版，它通过增加一个准备阶段来减少事务回滚的可能性。在第一阶段中，协调者节点向参与者节点发送准备请求，询问它们是否准备好提交事务。如果所有参与者节点都准备好了，那么在第二阶段中，协调者节点向所有参与者节点发送提交命令，完成事务提交操作。如果有任何一个参与者节点无法完成事务提交操作，那么在第三阶段中，协调者节点向所有参与者节点发送回滚命令，回滚事务。 Paxos算法：Paxos是一种分布式一致性算法，它可以通过多个节点之间的投票机制来保证数据的一致性。在Paxos中，节点之间通过消息交换来达成一致，每个节点可以担任提议者或者接收者的角色，通过互相通信来达成一致。 ZooKeeper：ZooKeeper是一种分布式协调服务，它提供了一些原语和API，可以用于实现分布式锁、分布式队列、分布式事务等功能。在ZooKeeper中，所有的操作都是原子性的，可以保证数据的一致性。","head":[["meta",{"property":"og:url","content":"https://gitee.com/zhaoxi7109/codenotes/springcloud/common.html"}],["meta",{"property":"og:site_name","content":"昭晞的小破站"}],["meta",{"property":"og:title","content":"常见概念"}],["meta",{"property":"og:description","content":"常见概念 5. 相关概念 5.1 分布式系统如何保证数据一致性 在分布式系统中，由于数据可能存储在不同的节点上，因此需要采取一些机制来保证数据的一致性。以下是一些常见的数据一致性机制： 两阶段提交（Two-phase Commit，2PC）：2PC是一种常见的分布式事务协议，它通过两个阶段的提交机制来保证多个节点之间的事务一致性。在第一阶段中，协调者节点向参与者节点发送提交请求，询问它们是否准备好提交事务。如果所有参与者节点都准备好了，那么在第二阶段中，协调者节点向所有参与者节点发送提交命令，完成事务提交操作。如果有任何一个参与者节点无法完成事务提交操作，那么整个事务将会回滚。 三阶段提交（Three-phase Commit，3PC）：3PC是2PC的改进版，它通过增加一个准备阶段来减少事务回滚的可能性。在第一阶段中，协调者节点向参与者节点发送准备请求，询问它们是否准备好提交事务。如果所有参与者节点都准备好了，那么在第二阶段中，协调者节点向所有参与者节点发送提交命令，完成事务提交操作。如果有任何一个参与者节点无法完成事务提交操作，那么在第三阶段中，协调者节点向所有参与者节点发送回滚命令，回滚事务。 Paxos算法：Paxos是一种分布式一致性算法，它可以通过多个节点之间的投票机制来保证数据的一致性。在Paxos中，节点之间通过消息交换来达成一致，每个节点可以担任提议者或者接收者的角色，通过互相通信来达成一致。 ZooKeeper：ZooKeeper是一种分布式协调服务，它提供了一些原语和API，可以用于实现分布式锁、分布式队列、分布式事务等功能。在ZooKeeper中，所有的操作都是原子性的，可以保证数据的一致性。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-20T05:42:02.000Z"}],["meta",{"property":"article:author","content":"zhaoxi"}],["meta",{"property":"article:tag","content":"SpringCloud"}],["meta",{"property":"article:modified_time","content":"2023-07-20T05:42:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常见概念\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-20T05:42:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"zhaoxi\\",\\"url\\":\\"https://gitee.com/zhaoxi7109\\"}]}"]]},"headers":[{"level":2,"title":"5. 相关概念","slug":"_5-相关概念","link":"#_5-相关概念","children":[{"level":3,"title":"5.1 分布式系统如何保证数据一致性","slug":"_5-1-分布式系统如何保证数据一致性","link":"#_5-1-分布式系统如何保证数据一致性","children":[]},{"level":3,"title":"5.2 分布式锁","slug":"_5-2-分布式锁","link":"#_5-2-分布式锁","children":[]},{"level":3,"title":"5.3 线程池复用","slug":"_5-3-线程池复用","link":"#_5-3-线程池复用","children":[]},{"level":3,"title":"5.4 序列化缓存","slug":"_5-4-序列化缓存","link":"#_5-4-序列化缓存","children":[]},{"level":3,"title":"5.5 吞吐量","slug":"_5-5-吞吐量","link":"#_5-5-吞吐量","children":[]},{"level":3,"title":"5.6 压力测试","slug":"_5-6-压力测试","link":"#_5-6-压力测试","children":[]},{"level":3,"title":"5.7 响应时间","slug":"_5-7-响应时间","link":"#_5-7-响应时间","children":[]},{"level":3,"title":"5.8 延迟队列","slug":"_5-8-延迟队列","link":"#_5-8-延迟队列","children":[]},{"level":3,"title":"5.9 消息补偿","slug":"_5-9-消息补偿","link":"#_5-9-消息补偿","children":[]},{"level":3,"title":"5.10 故障转移","slug":"_5-10-故障转移","link":"#_5-10-故障转移","children":[]},{"level":3,"title":"5.11 主从复制","slug":"_5-11-主从复制","link":"#_5-11-主从复制","children":[]}]}],"git":{"createdTime":1689831722000,"updatedTime":1689831722000,"contributors":[{"name":"zx","email":"2997605126@qq.com","commits":1}]},"readingTime":{"minutes":11.01,"words":3302},"filePathRelative":"codenotes/springcloud/common.md","localizedDate":"2023年7月20日","excerpt":"<h1> 常见概念</h1>\\n<h2> 5. 相关概念</h2>\\n<h3> 5.1 分布式系统如何保证数据一致性</h3>\\n<p>在分布式系统中，由于数据可能存储在不同的节点上，因此需要采取一些机制来保证数据的一致性。以下是一些常见的数据一致性机制：</p>\\n<ol>\\n<li>\\n<p>两阶段提交（Two-phase Commit，2PC）：2PC是一种常见的分布式事务协议，它通过两个阶段的提交机制来保证多个节点之间的事务一致性。在第一阶段中，协调者节点向参与者节点发送提交请求，询问它们是否准备好提交事务。如果所有参与者节点都准备好了，那么在第二阶段中，协调者节点向所有参与者节点发送提交命令，完成事务提交操作。如果有任何一个参与者节点无法完成事务提交操作，那么整个事务将会回滚。</p>\\n</li>\\n<li>\\n<p>三阶段提交（Three-phase Commit，3PC）：3PC是2PC的改进版，它通过增加一个准备阶段来减少事务回滚的可能性。在第一阶段中，协调者节点向参与者节点发送准备请求，询问它们是否准备好提交事务。如果所有参与者节点都准备好了，那么在第二阶段中，协调者节点向所有参与者节点发送提交命令，完成事务提交操作。如果有任何一个参与者节点无法完成事务提交操作，那么在第三阶段中，协调者节点向所有参与者节点发送回滚命令，回滚事务。</p>\\n</li>\\n<li>\\n<p>Paxos算法：Paxos是一种分布式一致性算法，它可以通过多个节点之间的投票机制来保证数据的一致性。在Paxos中，节点之间通过消息交换来达成一致，每个节点可以担任提议者或者接收者的角色，通过互相通信来达成一致。</p>\\n</li>\\n<li>\\n<p>ZooKeeper：ZooKeeper是一种分布式协调服务，它提供了一些原语和API，可以用于实现分布式锁、分布式队列、分布式事务等功能。在ZooKeeper中，所有的操作都是原子性的，可以保证数据的一致性。</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
